{"version":3,"file":"index.esm.js","sources":["../src/axios.ts","../src/constants.ts","../src/storage/InMemoryStorgeProvider.ts","../src/storage/LocalStorageProvider.ts","../src/storage/NullStorageProvider.ts","../src/storage/SessionStorageProvider.ts","../src/utils.ts","../src/Authing.ts"],"sourcesContent":["import axios, { AxiosError, AxiosRequestConfig } from 'axios';\n\nfunction isAxiosError(e: any): e is AxiosError {\n  return e.isAxiosError;\n}\n\nasync function axiosPromiseWrapper(p: Promise<any>) {\n  try {\n    return await p;\n  } catch (e) {\n    if (isAxiosError(e)) {\n      if (e.response?.data?.error) {\n        const { error, error_description } = e.response.data;\n        throw new Error(`认证服务器返回错误 ${error}: ${error_description}`);\n      }\n    }\n    throw e;\n  }\n}\n\nexport async function axiosGet(\n  url: string,\n  options?: AxiosRequestConfig<string>,\n) {\n  return axiosPromiseWrapper(axios.get(url, options));\n}\n\nexport async function axiosPost(\n  url: string,\n  data?: any,\n  options?: AxiosRequestConfig<string>,\n) {\n  return axiosPromiseWrapper(axios.post(url, data, options));\n}\n","export const SDK_IDENTIFIER = 'authing-spa';\nexport const STORAGE_VERSION = '1';\n\nexport const STORAGE_KEY_PREFIX = `${SDK_IDENTIFIER}:${STORAGE_VERSION}`;\n\nexport const DEFAULT_IFRAME_LOGINSTATE_TIMEOUT = 5000;\n\nexport const DEFAULT_POPUP_WIDTH = 800;\nexport const DEFAULT_POPUP_HEIGHT = 600;\n\nexport const DEFAULT_SCOPE = 'openid profile';\n\nexport const MSG_PENDING_AUTHZ =\n  '另一个认证流程正在进行中，请不要同时发起多个认证';\nexport const MSG_CROSS_ORIGIN_ISOLATED =\n  '当前页面运行在隔离模式下, 无法进行此方式登录, 请使用 loginWithRedirect';\n","import { MayBePromise } from '../types';\nimport { StorageProvider } from './interface';\n\nexport class InMemoryStorageProvider<T> implements StorageProvider<T> {\n  private readonly storage = Object.create(null);\n\n  get(key: string): MayBePromise<T | null> {\n    return this.storage[key] ?? null;\n  }\n\n  put(key: string, value: T): MayBePromise<void> {\n    this.storage[key] = value;\n  }\n\n  delete(key: string): MayBePromise<void> {\n    delete this.storage[key];\n  }\n}\n","import { MayBePromise } from '../types';\nimport { StorageProvider } from './interface';\n\nexport class LocalStorageProvider<T> implements StorageProvider<T> {\n  get(key: string): MayBePromise<T | null> {\n    const jsonItem = localStorage.getItem(key);\n    if (jsonItem === null) {\n      return null;\n    }\n    return JSON.parse(jsonItem) as T;\n  }\n\n  put(key: string, value: T): MayBePromise<void> {\n    localStorage.setItem(key, JSON.stringify(value));\n  }\n\n  delete(key: string): MayBePromise<void> {\n    localStorage.removeItem(key);\n  }\n}\n","import { MayBePromise } from '../types';\nimport { StorageProvider } from './interface';\n\nexport class NullStorageProvider<T> implements StorageProvider<T> {\n  get(_key: string): MayBePromise<T | null> {\n    return null;\n  }\n\n  put(_key: string, _value: T): MayBePromise<void> {\n    // null\n  }\n\n  delete(_key: string): MayBePromise<void> {\n    // null\n  }\n}\n","import { MayBePromise } from \"../types\";\nimport { StorageProvider } from \"./interface\";\n\nexport class SessionStorageProvider<T> implements StorageProvider<T> {\n  get(key: string): MayBePromise<T | null> {\n    const jsonItem = sessionStorage.getItem(key);\n    if (jsonItem === null) {\n      return null;\n    }\n    return JSON.parse(jsonItem) as T;\n  }\n\n  put(key: string, value: T): MayBePromise<void> {\n    sessionStorage.setItem(key, JSON.stringify(value));\n  }\n\n  delete(key: string): MayBePromise<void> {\n    sessionStorage.removeItem(key);\n  }\n}","import { STORAGE_KEY_PREFIX } from './constants';\nimport { StrDict } from './types';\n\nexport function createQueryParams(params: any) {\n  return Object.keys(params)\n    .filter((k) => params[k] !== null && params[k] !== undefined)\n    .map(\n      (k) =>\n        encodeURIComponent(k) + '=' + encodeURIComponent(params[k] as string),\n    )\n    .join('&');\n}\n\nexport function loginStateKey(appId: string) {\n  return [STORAGE_KEY_PREFIX, appId, 'login-state'].join(':');\n}\n\nexport function transactionKey(appId: string, state: string) {\n  return [STORAGE_KEY_PREFIX, appId, 'tx', state].join(':');\n}\n\nexport function getCrypto() {\n  //ie 11.x uses msCrypto\n  return (window.crypto || (window as any).msCrypto) as Crypto;\n}\n\nexport function getCryptoSubtle() {\n  const crypto = getCrypto();\n  //safari 10.x uses webkitSubtle\n  return crypto.subtle || (crypto as any).webkitSubtle;\n}\n\nexport function createRandomString(length: number) {\n  const charset =\n    '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz';\n  const randomValues = Array.from(\n    getCrypto().getRandomValues(new Uint8Array(length)),\n  );\n  return randomValues.map((v) => charset[v % charset.length]).join('');\n}\n\nexport function string2Buf(str: string) {\n  const buffer: number[] = [];\n  for (let i = 0; i < str.length; ++i) {\n    buffer.push(str.charCodeAt(i));\n  }\n  return new Uint8Array(buffer);\n}\n\nfunction buf2Base64Url(buffer: ArrayBuffer) {\n  const ie11SafeInput = new Uint8Array(buffer);\n  let binary = '';\n  for (let i = 0; i < ie11SafeInput.byteLength; ++i) {\n    binary += String.fromCharCode(ie11SafeInput[i]);\n  }\n  const base64 = window.btoa(binary);\n  const charMapping: StrDict = { '+': '-', '/': '_', '=': '' };\n  return base64.replace(/[+/=]/g, (ch: string) => charMapping[ch]);\n}\n\nexport async function genPKCEPair(algorithm = 'SHA-256') {\n  // 规定最少 43 个字符\n  const codeVerifier = createRandomString(43);\n  const hash = await getCryptoSubtle().digest(\n    algorithm,\n    string2Buf(codeVerifier),\n  );\n  const codeChallenge = buf2Base64Url(hash);\n  return { codeChallenge, codeVerifier };\n}\n\nexport function domainC14n(domain: string) {\n  const domainExp =\n    /^((?:http)|(?:https):\\/\\/)?((?:[\\w-_]+)(?:\\.[\\w-_]+)+)(?:\\/.*)?$/;\n  const matchRes = domainExp.exec(domain);\n  if (matchRes && matchRes[2]) {\n    return `${matchRes[1] ?? 'https://'}${matchRes[2]}`;\n  }\n  throw Error(`无效的域名配置: ${domain}`);\n}\n\nexport function parseToken(token: string) {\n  let [header, body, sig] = token.split('.');\n  if (!sig) {\n    throw new Error('无效的 Token 格式');\n  }\n\n  const headerObj = JSON.parse(window.atob(header));\n  if (headerObj.enc) {\n    throw new Error(\n      '本 SDK 目前不支持处理加密 Token, 请在应用配置中关闭「ID Token 加密」功能',\n    );\n  }\n\n  body = body.replace(/-/g, '+').replace(/_/g, '/');\n  body = decodeURIComponent(window.atob(body).split('').map(function(c) {\n    return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);\n  }).join(''));\n\n  return {\n    header: headerObj,\n    body: JSON.parse(body),\n  };\n}\n\nexport function isIE() {\n  if (\n    window.navigator.userAgent.indexOf('MSIE') >= 1 ||\n    (window.navigator.userAgent.indexOf('Trident') >= 1 &&\n      window.navigator.userAgent.indexOf('rv') >= 1) ||\n    window.navigator.userAgent.indexOf('Edge') >= 1\n  ) {\n    return true;\n  }\n\n  return false;\n}\n","import { axiosGet, axiosPost } from './axios';\nimport {\n  DEFAULT_IFRAME_LOGINSTATE_TIMEOUT,\n  DEFAULT_POPUP_HEIGHT,\n  DEFAULT_POPUP_WIDTH,\n  DEFAULT_SCOPE,\n  MSG_CROSS_ORIGIN_ISOLATED,\n  MSG_PENDING_AUTHZ,\n} from './constants';\nimport {\n  AuthingSPAInitOptions,\n  LoginState,\n  IDToken,\n  AccessToken,\n  LoginTransaction,\n  AuthzURLParams,\n  OIDCWebMessageResponse,\n  PKCETokenParams,\n  OIDCTokenResponse,\n  LoginStateWithCustomStateData,\n  LogoutURLParams,\n  UserInfo,\n} from './global';\nimport { InMemoryStorageProvider } from './storage/InMemoryStorgeProvider';\nimport { StorageProvider } from './storage/interface';\nimport { LocalStorageProvider } from './storage/LocalStorageProvider';\nimport { NullStorageProvider } from './storage/NullStorageProvider';\nimport { SessionStorageProvider } from './storage/SessionStorageProvider';\nimport { MsgListener, StrDict } from './types';\nimport {\n  createQueryParams,\n  createRandomString,\n  domainC14n,\n  genPKCEPair,\n  getCrypto,\n  getCryptoSubtle,\n  isIE,\n  loginStateKey,\n  parseToken,\n  transactionKey,\n} from './utils';\n\nexport class Authing {\n  private globalMsgListener: MsgListener | null | undefined;\n\n  private readonly options: Required<AuthingSPAInitOptions>;\n  private readonly loginStateProvider: StorageProvider<LoginState>;\n  private readonly transactionProvider: StorageProvider<LoginTransaction>;\n  private readonly domain: string;\n\n  constructor(options: AuthingSPAInitOptions) {\n    this.options = options as any;\n    this.domain = domainC14n(this.options.domain);\n\n    if (!options.useImplicitMode && (!getCrypto() || !getCryptoSubtle())) {\n      throw new Error(\n        'PKCE 模式需要浏览器 crypto 能力, 请确保浏览器处于 https 域名下，或设置 useImplicitMode 为 true',\n      );\n    }\n\n    if (typeof localStorage === 'object') {\n      this.loginStateProvider = new LocalStorageProvider();\n    } else {\n      console.warn('您的浏览器版本过低，登录态存储功能将不可用');\n      this.loginStateProvider = new InMemoryStorageProvider();\n    }\n\n    if (typeof sessionStorage === 'object') {\n      this.transactionProvider = new SessionStorageProvider();\n    } else {\n      if (!options.useImplicitMode) {\n        console.warn(\n          '您的浏览器版本过低，PKCE 重定向认证功能将不可用，请设置 useImplicitMode 为 true',\n        );\n      }\n      this.transactionProvider = new NullStorageProvider();\n    }\n\n    options.implicitResponseType =\n      options.implicitResponseType ?? 'id_token token';\n    options.redirectResponseMode = options.redirectResponseMode ?? 'fragment';\n    options.popupWidth = options.popupWidth ?? DEFAULT_POPUP_WIDTH;\n    options.popupHeight = options.popupHeight ?? DEFAULT_POPUP_HEIGHT;\n    options.scope = options.scope ?? DEFAULT_SCOPE;\n  }\n\n  /**\n   * 按顺序用以下方式获取用户登录态：\n   *\n   * 1. 本地缓存获取\n   * 2. 隐藏 iframe 获取\n   *\n   * @param options.ignoreCache 忽略本地缓存\n   */\n  async getLoginState(\n    options: {\n      ignoreCache?: boolean;\n    } = {},\n  ): Promise<null | LoginState> {\n    // 1. 从 loginStateProvider 中（默认为 localStorage）获取\n    if (!options.ignoreCache) {\n      const state = await this.loginStateProvider.get(\n        loginStateKey(this.options.appId),\n      );\n      if (state && state.expireAt && state.expireAt > Date.now()) {\n        if (!this.options.introspectAccessToken || !state.accessToken) {\n          return state;\n        }\n\n        const { data } = await axiosPost(\n          `${this.domain}/oidc/token/introspection`,\n          createQueryParams({\n            client_id: this.options.appId,\n            token: state.accessToken,\n          }),\n          {\n            headers: {\n              'Content-Type': 'application/x-www-form-urlencoded',\n            },\n          },\n        );\n\n        if (data.active === true) {\n          return state;\n        }\n      }\n    }\n\n    // 清掉旧的登录态\n    await this.loginStateProvider.delete(loginStateKey(this.options.appId));\n\n    // 2. 用隐藏 iframe 获取\n    if (this.globalMsgListener !== undefined) {\n      throw new Error(MSG_PENDING_AUTHZ);\n    }\n    this.globalMsgListener = null;\n\n    if (window.crossOriginIsolated) {\n      // 如果是 crossOriginIsolated 就发不了 postMessage 了\n      console.warn('当前页面运行在隔离模式下，无法获取登录态');\n      return null;\n    }\n\n    const state = createRandomString(16);\n    const nonce = createRandomString(16);\n    let codeVerifier: string | undefined;\n    const redirectUrl = this.options.redirectUri ?? window.location.origin;\n\n    const params: AuthzURLParams = {\n      redirect_uri: redirectUrl,\n      response_mode: 'web_message',\n      response_type: this.options.useImplicitMode\n        ? this.options.implicitResponseType\n        : 'code',\n      client_id: this.options.appId,\n      state,\n      nonce,\n      prompt: 'none',\n      scope: this.options.scope,\n    };\n\n    if (!this.options.useImplicitMode) {\n      const { codeChallenge, codeVerifier: v } = await genPKCEPair();\n      codeVerifier = v;\n      params.code_challenge = codeChallenge;\n      params.code_challenge_method = 'S256';\n    }\n\n    const iframe = document.createElement('iframe');\n    // iframe.title = 'postMessage() Initiator';\n    iframe.hidden = true;\n    iframe.width = iframe.height = '0';\n\n    iframe.src = `${this.domain}/oidc/auth?${createQueryParams(params)}`;\n    if (isIE()) {\n      document.body.appendChild(iframe);\n    } else {\n      document.body.append(iframe);\n    }\n\n    const res = await Promise.race([\n      this.listenToPostMessage(state),\n      new Promise<null>((resolve) =>\n        setTimeout(() => resolve(null), DEFAULT_IFRAME_LOGINSTATE_TIMEOUT),\n      ),\n    ]);\n\n    if (this.globalMsgListener) {\n      window.removeEventListener('message', this.globalMsgListener);\n    }\n    this.globalMsgListener = undefined;\n\n    iframe.remove();\n\n    if (res === null) {\n      console.warn(`登录态获取超时`);\n      return null;\n    }\n\n    if (res.error) {\n      if (res.error !== 'login_required') {\n        console.warn(\n          `登录态获取失败，认证服务器返回错误: error=${res.error}, error_description=${res.errorDesc}`,\n        );\n      } else {\n        console.info('用户未登录');\n      }\n      return null;\n    }\n\n    if (res.state !== state) {\n      throw new Error('state 验证失败');\n    }\n\n    return this.handleOIDCWebMsgResponse(res, nonce, redirectUrl, codeVerifier);\n  }\n\n  /**\n   * 将用户重定向到 Authing 认证端点进行登录，需要配合 handleRedirectCallback 使用\n   *\n   * @param options.redirectUri 回调地址，默认为初始化参数中的 redirectUri\n   * @param options.originalUri 发起登录的 URL，若设置了 redirectToOriginalUri 会在登录结束后重定向回到此页面，默认为当前 URL\n   * @param options.forced 即使在用户已登录时也提示用户再次登录\n   * @param options.customState 自定义的中间状态，会被传递到回调端点\n   */\n  async loginWithRedirect(\n    options: {\n      redirectUri?: string;\n      originalUri?: string;\n      forced?: boolean;\n      customState?: any;\n    } = {},\n  ): Promise<void> {\n    const redirectUri = options.redirectUri || this.options.redirectUri;\n    if (!redirectUri) {\n      throw new Error('必须设置 redirect_uri');\n    }\n\n    const state = createRandomString(16);\n    const nonce = createRandomString(16);\n\n    const params: AuthzURLParams = {\n      redirect_uri: redirectUri,\n      response_mode: this.options.redirectResponseMode,\n      response_type: this.options.useImplicitMode\n        ? this.options.implicitResponseType\n        : 'code',\n      client_id: this.options.appId,\n      ...(options.forced && { prompt: 'login' }),\n      state,\n      nonce,\n      scope: this.options.scope,\n    };\n\n    let codeVerifier: string | undefined;\n    if (!this.options.useImplicitMode) {\n      const { codeChallenge, codeVerifier: v } = await genPKCEPair();\n      params.code_challenge = codeChallenge;\n      params.code_challenge_method = 'S256';\n      codeVerifier = v;\n    }\n\n    await this.transactionProvider.put(\n      transactionKey(this.options.appId, state),\n      {\n        codeVerifier,\n        state,\n        redirectUri,\n        nonce,\n        ...(this.options.redirectToOriginalUri && {\n          originalUri: options.originalUri ?? window.location.href,\n        }),\n        ...(options.customState !== undefined && {\n          customState: options.customState,\n        }),\n      },\n    );\n\n    window.location.replace(\n      `${this.domain}/oidc/auth?${createQueryParams(params)}`,\n    );\n  }\n\n  /**\n   * 判断当前 URL 是否为 Authing 登录回调 URL\n   */\n  isRedirectCallback(): boolean {\n    const params = this.resolveCallbackParams();\n\n    if (!params) {\n      return false;\n    }\n\n    if (params['error']) {\n      return true;\n    }\n\n    if (this.options.useImplicitMode) {\n      return !!(params['access_token'] || params['id_token']);\n    } else {\n      return !!params['code'];\n    }\n  }\n\n  /**\n   * 在回调端点处理 Authing 发送的授权码或 token，获取用户登录态\n   */\n  async handleRedirectCallback(): Promise<LoginStateWithCustomStateData> {\n    const paramDict = this.resolveCallbackParams();\n    if (!paramDict) {\n      throw new Error('非法的回调 URL');\n    }\n\n    if (paramDict.error) {\n      throw new Error(\n        `认证失败, error=${paramDict.error}, error_description=${paramDict.error_description}`,\n      );\n    }\n\n    let originalUri: string | undefined;\n    let customState: any;\n\n    const { state } = paramDict;\n    if (!state) {\n      throw new Error('非法的回调 URL: 缺少 state');\n    }\n    const tx = await this.transactionProvider.get(\n      transactionKey(this.options.appId, state),\n    );\n    if (tx) {\n      await this.transactionProvider.delete(\n        transactionKey(this.options.appId, state),\n      );\n\n      if (tx.state !== state) {\n        throw new Error('state 验证失败');\n      }\n\n      originalUri = tx.originalUri;\n      customState = tx.customState;\n      if (!this.options.useImplicitMode) {\n        // PKCE code flow\n        const { code } = paramDict;\n        if (!code) {\n          throw new Error('非法的回调 URL: 缺少 code');\n        }\n        const res = await this.exchangeToken(\n          code,\n          tx.redirectUri,\n          tx.codeVerifier as string,\n          tx.nonce,\n        );\n\n        if (this.options.redirectToOriginalUri && originalUri) {\n          window.location.replace(originalUri);\n        }\n\n        return res;\n      }\n    } else if (!this.options.useImplicitMode) {\n      throw new Error(\n        '获取登录流程会话失败, 请确认是否重复访问了回调端点，以及浏览器是否支持 sessionStorage',\n      );\n    }\n\n    // implicit flow\n    const idToken = paramDict.id_token;\n    const accessToken = paramDict.access_token;\n    const nonce = tx?.nonce;\n\n    if (\n      (this.options.implicitResponseType.includes('token') && !accessToken) ||\n      (this.options.implicitResponseType.includes('id_token') && !idToken)\n    ) {\n      throw new Error('非法的回调 URL: 缺少 token');\n    }\n\n    const result = await this.saveLoginState({\n      idToken,\n      accessToken,\n      nonce,\n    });\n\n    if (this.options.redirectToOriginalUri && originalUri) {\n      window.location.replace(originalUri);\n    }\n\n    return { ...result, customState };\n  }\n\n  /**\n   * 弹出一个新的 Authing 登录页面窗口，在其中完成登录\n   *\n   * @param options.redirectUri 回调地址，需要和当前页面在 same origin 下；默认为初始化参数中的 redirectUri 或 window.location.origin\n   * @param options.forced 即使在用户已登录时也提示用户再次登录\n   */\n  async loginWithPopup(\n    options: { redirectUri?: string; forced?: boolean } = {},\n  ): Promise<LoginState | null> {\n    const redirectUri =\n      options.redirectUri || this.options.redirectUri || window.location.origin;\n\n    if (this.globalMsgListener !== undefined) {\n      throw new Error(MSG_PENDING_AUTHZ);\n    }\n    this.globalMsgListener = null;\n\n    if (window.crossOriginIsolated) {\n      // 如果是 crossOriginIsolated 就发不了 postMessage 了\n      throw new Error(MSG_CROSS_ORIGIN_ISOLATED);\n    }\n\n    const state = createRandomString(16);\n    const nonce = createRandomString(16);\n\n    const params: AuthzURLParams = {\n      redirect_uri: redirectUri,\n      response_mode: 'web_message',\n      response_type: this.options.useImplicitMode\n        ? this.options.implicitResponseType\n        : 'code',\n      client_id: this.options.appId,\n      state,\n      nonce,\n      ...(options.forced && { prompt: 'login' }),\n      scope: this.options.scope,\n    };\n\n    let codeVerifier: string | undefined;\n    if (!this.options.useImplicitMode) {\n      const { codeChallenge, codeVerifier: v } = await genPKCEPair();\n      codeVerifier = v;\n      params.code_challenge = codeChallenge;\n      params.code_challenge_method = 'S256';\n    }\n\n    const url = `${this.domain}/oidc/auth?${createQueryParams(params)}`;\n    const win = window.open(\n      url,\n      'authing-spa-login-window',\n      `popup,width=${this.options.popupWidth},height=${this.options.popupHeight}`,\n    );\n    if (!win) {\n      throw new Error('弹出窗口失败');\n    }\n\n    const res = await Promise.race([\n      this.listenToPostMessage(state),\n      new Promise<null>((resolve) => {\n        const handle = setInterval(() => {\n          if (win.closed) {\n            clearInterval(handle);\n            // 防止 post message 事件和 close 事件同时到达\n            setTimeout(() => resolve(null), 500);\n          }\n        }, 500);\n      }),\n    ]);\n    if (this.globalMsgListener) {\n      window.removeEventListener('message', this.globalMsgListener);\n    }\n    this.globalMsgListener = undefined;\n\n    if (!res) {\n      // 窗口被用户关闭了\n      return null;\n    }\n\n    if (res.error) {\n      throw new Error(\n        `登录失败，认证服务器返回错误: error=${res.error}, error_description=${res.errorDesc}`,\n      );\n    }\n\n    if (res.state !== state) {\n      throw new Error('state 验证失败');\n    }\n\n    return this.handleOIDCWebMsgResponse(res, nonce, redirectUri, codeVerifier);\n  }\n\n  // /**\n  //  * 由于 iframe 存在跨域 cookie 无法携带以及联邦认证支持问题，暂时不支持本方法\n  //  *\n  //  * 在指定的 iframe 中显示 Authing 登录页面，在其中完成登录\n  //  *\n  //  * 注意: 当需要手动关闭 iframe 时，必须同时调用 abortIframeLogin 方法\n  //  *\n  //  * @param options.forced 即使在用户已登录时也提示用户再次登录\n  //  */\n  /*\n  async loginWithIframe(\n    iframe: HTMLIFrameElement,\n    options: { forced?: boolean } = {},\n  ): Promise<LoginState> {\n    if (this.globalMsgListener !== undefined) {\n      throw new Error(MSG_PENDING_AUTHZ);\n    }\n    this.globalMsgListener = null;\n\n    if (window.crossOriginIsolated) {\n      // 如果是 crossOriginIsolated 就发不了 postMessage 了\n      throw new Error(MSG_CROSS_ORIGIN_ISOLATED);\n    }\n\n    const state = createRandomString(16);\n    const nonce = createRandomString(16);\n    let codeVerifier: string | undefined;\n\n    const params: AuthzURLParams = {\n      redirect_uri: window.location.href,\n      response_mode: 'web_message',\n      response_type: this.options.useImplicitMode\n        ? this.options.implicitResponseType\n        : 'code',\n      client_id: this.options.appId,\n      state,\n      nonce,\n      ...(options.forced && { prompt: 'login' }),\n      scope: this.options.scope,\n    };\n\n    if (!this.options.useImplicitMode) {\n      const { codeChallenge, codeVerifier: v } = await genPKCEPair();\n      codeVerifier = v;\n      params.code_challenge = codeChallenge;\n      params.code_challenge_method = 'S256';\n    }\n\n    iframe.src = `${this.domain}/oidc/auth?${createQueryParams(params)}`;\n\n    const res = await this.listenToPostMessage(state);\n    if (res.error) {\n      throw new Error(\n        `登录失败，认证服务器返回错误: error=${res.error}, error_description=${res.errorDesc}`,\n      );\n    }\n\n    if (res.state !== state) {\n      throw new Error('state 验证失败');\n    }\n\n    return this.handleSuccessfulOIDCResponse(\n      res,\n      window.location.href,\n      codeVerifier,\n    );\n  }\n  */\n\n  /**\n   * 手动中止 iframe 登录, 并移除 SDK 注册的事件监听器\n   */\n  /*\n  abortIframeLogin(): void {\n    if (this.globalMsgListener) {\n      window.removeEventListener('message', this.globalMsgListener);\n    }\n    this.globalMsgListener = undefined;\n  }\n  */\n\n  /**\n   * 用 Access Token 获取用户身份信息\n   *\n   * @param options.accessToken Access Token，默认从登录态中获取\n   */\n  async getUserInfo(\n    options: {\n      accessToken?: string;\n    } = {},\n  ): Promise<UserInfo> {\n    const accessToken =\n      options.accessToken ?? (await this.getLoginState())?.accessToken;\n    if (!accessToken) {\n      throw new Error('未传入 access token');\n    }\n\n    const { data } = await axiosGet(`${this.domain}/oidc/me`, {\n      headers: {\n        Authorization: `Bearer ${accessToken}`,\n      },\n    });\n\n    return data as UserInfo;\n  }\n\n  /**\n   * 重定向到 Authing 的登出端点，完成登出操作\n   *\n   * @param options.redirectUri 登出完成后的回调地址，默认为初始化参数中的 logoutRedirectUri\n   * @param options.state 自定义中间状态\n   */\n  async logoutWithRedirect(\n    options: {\n      redirectUri?: string | null;\n      state?: string;\n    } = {},\n  ): Promise<void> {\n    const loginState = await this.loginStateProvider.get(\n      loginStateKey(this.options.appId),\n    );\n    if (!loginState) {\n      return;\n    }\n    await this.loginStateProvider.delete(loginStateKey(this.options.appId));\n\n    const params: LogoutURLParams = {\n      id_token_hint: loginState.idToken,\n    };\n\n    const logoutRedirectUri =\n      options.redirectUri ?? this.options.logoutRedirectUri;\n    if (logoutRedirectUri) {\n      params.post_logout_redirect_uri = logoutRedirectUri;\n      params.state = options.state;\n    }\n\n    await this.loginStateProvider.delete(loginStateKey(this.options.appId));\n\n    window.location.replace(\n      `${this.domain}/oidc/session/end?${createQueryParams(params)}`,\n    );\n    return;\n  }\n\n  private async listenToPostMessage(state: string) {\n    return new Promise<OIDCWebMessageResponse>((resolve, reject) => {\n      const msgEventListener = (msgEvent: MessageEvent) => {\n        if (\n          msgEvent.origin !== this.domain ||\n          msgEvent.data?.type !== 'authorization_response'\n        ) {\n          return;\n        }\n\n        window.removeEventListener('message', msgEventListener);\n        this.globalMsgListener = undefined;\n\n        const { response } = msgEvent.data;\n        if (!response || response.state !== state) {\n          return reject(new Error('非法的服务端返回值'));\n        }\n\n        if (response.error) {\n          return resolve({\n            error: response.error,\n            errorDesc: response.error_description,\n          });\n        }\n\n        return resolve({\n          accessToken: response.access_token,\n          idToken: response.id_token,\n          refreshToken: response.refresh_token,\n          code: response.code,\n          state: response.state,\n        });\n      };\n\n      this.globalMsgListener = msgEventListener;\n      window.addEventListener('message', msgEventListener);\n    });\n  }\n\n  private async saveLoginState(params: {\n    accessToken?: string;\n    idToken?: string;\n    nonce?: string;\n  }) {\n    const { accessToken, idToken } = params;\n    const loginState: LoginState = {\n      accessToken: accessToken,\n      idToken: idToken,\n      timestamp: Date.now(),\n    };\n\n    if (idToken) {\n      const parsedIdToken: IDToken = parseToken(idToken).body;\n      loginState.parsedIdToken = parsedIdToken;\n      loginState.expireAt = parsedIdToken.exp * 1000;\n\n      if (params.nonce && parsedIdToken.nonce !== params.nonce) {\n        throw new Error('nonce 验证失败');\n      }\n    }\n\n    if (accessToken) {\n      const parsedAccessToken: AccessToken = parseToken(accessToken).body;\n      loginState.parsedAccessToken = parsedAccessToken;\n      loginState.expireAt = parsedAccessToken.exp * 1000;\n    }\n\n    await this.loginStateProvider.put(\n      loginStateKey(this.options.appId),\n      loginState,\n    );\n    return loginState;\n  }\n\n  private async exchangeToken(\n    code: string,\n    redirectUri: string,\n    codeVerifier: string,\n    nonce: string,\n  ) {\n    const tokenParam: PKCETokenParams = {\n      grant_type: 'authorization_code',\n      code,\n      code_verifier: codeVerifier as string,\n      client_id: this.options.appId,\n      redirect_uri: redirectUri,\n    };\n\n    const { data: tokenRes } = (await axiosPost(\n      `${this.domain}/oidc/token`,\n      createQueryParams(tokenParam),\n      {\n        headers: {\n          'Content-Type': 'application/x-www-form-urlencoded',\n        },\n      },\n    )) as { data: OIDCTokenResponse };\n\n    return this.saveLoginState({\n      idToken: tokenRes.id_token,\n      accessToken: tokenRes.access_token,\n      nonce,\n    });\n  }\n\n  private async handleOIDCWebMsgResponse(\n    res: OIDCWebMessageResponse,\n    nonce: string,\n    // 只有 PKCE 会用下面两个参数\n    redirectUri?: string,\n    codeVerifier?: string,\n  ) {\n    if (this.options.useImplicitMode) {\n      // implicit flow\n      if (\n        (this.options.implicitResponseType.includes('token') &&\n          typeof res.accessToken !== 'string') ||\n        (this.options.implicitResponseType.includes('id_token') &&\n          typeof res.idToken !== 'string')\n      ) {\n        throw new Error('无效的 Token 返回值');\n      }\n\n      return this.saveLoginState({\n        accessToken: res.accessToken,\n        idToken: res.idToken,\n        nonce,\n      });\n    }\n\n    // PKCE code flow\n    if (typeof res.code !== 'string') {\n      throw new Error('无效的 Code 返回值');\n    }\n\n    if (!redirectUri || !codeVerifier) {\n      // should never happen\n      throw new Error();\n    }\n\n    return this.exchangeToken(res.code, redirectUri, codeVerifier, nonce);\n  }\n\n  private resolveCallbackParams() {\n    const paramSource: string =\n      this.options.redirectResponseMode === 'fragment'\n        ? window.location.hash\n        : window.location.search;\n    if (!paramSource) {\n      return null;\n    }\n\n    const paramDict: StrDict = Object.create(null);\n    paramSource\n      .substring(1)\n      .split('&')\n      .forEach((item) => {\n        const [key, val] = item.split('=');\n        paramDict[key] = val;\n      });\n\n    return paramDict;\n  }\n}\n"],"names":["axiosPromiseWrapper","p","_d","e_1","isAxiosError","_b","response","_a","data","error","_c","error_description","Error","concat","axiosGet","url","options","axios","get","axiosPost","post","STORAGE_KEY_PREFIX","InMemoryStorageProvider","this","storage","Object","create","prototype","key","put","value","delete","LocalStorageProvider","jsonItem","localStorage","getItem","JSON","parse","setItem","stringify","removeItem","NullStorageProvider","_key","_value","SessionStorageProvider","sessionStorage","createQueryParams","params","keys","filter","k","undefined","map","encodeURIComponent","join","loginStateKey","appId","transactionKey","state","getCrypto","window","crypto","msCrypto","getCryptoSubtle","subtle","webkitSubtle","createRandomString","length","charset","Array","from","getRandomValues","Uint8Array","v","string2Buf","str","buffer","i","push","charCodeAt","genPKCEPair","algorithm","codeVerifier","digest","hash","sent","codeChallenge","ie11SafeInput","binary","byteLength","String","fromCharCode","base64","btoa","charMapping","replace","ch","buf2Base64Url","parseToken","token","split","header","body","headerObj","atob","enc","decodeURIComponent","c","toString","slice","Authing","domain","matchRes","exec","domainC14n","useImplicitMode","loginStateProvider","console","warn","transactionProvider","implicitResponseType","redirectResponseMode","popupWidth","popupHeight","scope","_e","getLoginState","ignoreCache","state_1","expireAt","Date","now","introspectAccessToken","accessToken","client_id","headers","active","globalMsgListener","crossOriginIsolated","nonce","redirectUrl","redirectUri","location","origin","redirect_uri","response_mode","response_type","prompt","code_challenge","code_challenge_method","iframe","document","createElement","hidden","width","height","src","navigator","userAgent","indexOf","appendChild","append","Promise","race","listenToPostMessage","resolve","setTimeout","res","removeEventListener","remove","errorDesc","info","handleOIDCWebMsgResponse","loginWithRedirect","forced","__assign","redirectToOriginalUri","originalUri","href","customState","isRedirectCallback","resolveCallbackParams","handleRedirectCallback","paramDict","tx","code","exchangeToken","idToken","id_token","access_token","includes","saveLoginState","result","loginWithPopup","win","open","handle","setInterval","closed","clearInterval","getUserInfo","Authorization","logoutWithRedirect","loginState","id_token_hint","logoutRedirectUri","post_logout_redirect_uri","reject","msgEventListener","msgEvent","_this","type","refreshToken","refresh_token","addEventListener","timestamp","parsedIdToken","exp","parsedAccessToken","tokenParam","grant_type","code_verifier","tokenRes","paramSource","search","substring","forEach","item","val"],"mappings":"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"}