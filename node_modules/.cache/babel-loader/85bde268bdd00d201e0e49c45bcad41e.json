{"ast":null,"code":"var __spreadArray = this && this.__spreadArray || function (to, from) {\n  for (var i = 0, il = from.length, j = to.length; i < il; i++, j++) to[j] = from[i];\n\n  return to;\n};\n\nimport { BigInteger } from 'jsbn';\nimport { encodeDer, decodeDer } from './asn1';\nimport * as _ from './utils';\nimport sm3 from './sm3';\n\nvar _a = _.generateEcparam(),\n    G = _a.G,\n    curve = _a.curve,\n    n = _a.n;\n\nvar C1C2C3 = 0;\n/**\n * 加密\n */\n\nfunction doEncrypt(msg, publicKey, cipherMode) {\n  if (cipherMode === void 0) {\n    cipherMode = 1;\n  }\n\n  msg = typeof msg === 'string' ? _.hexToArray(_.utf8ToHex(msg)) : Array.prototype.slice.call(msg);\n  publicKey = _.getGlobalCurve().decodePointHex(publicKey); // 先将公钥转成点\n\n  var keypair = _.generateKeyPairHex();\n\n  var k = new BigInteger(keypair.privateKey, 16); // 随机数 k\n  // c1 = k * G\n\n  var c1 = keypair.publicKey;\n  if (c1.length > 128) c1 = c1.substr(c1.length - 128); // (x2, y2) = k * publicKey\n\n  var p = publicKey.multiply(k);\n\n  var x2 = _.hexToArray(_.leftPad(p.getX().toBigInteger().toRadix(16), 64));\n\n  var y2 = _.hexToArray(_.leftPad(p.getY().toBigInteger().toRadix(16), 64)); // c3 = hash(x2 || msg || y2)\n\n\n  var c3 = _.arrayToHex(sm3([].concat(x2, msg, y2)));\n\n  var ct = 1;\n  var offset = 0;\n  var t = []; // 256 位\n\n  var z = [].concat(x2, y2);\n\n  var nextT = function () {\n    // (1) Hai = hash(z || ct)\n    // (2) ct++\n    t = sm3(__spreadArray(__spreadArray([], z), [ct >> 24 & 0x00ff, ct >> 16 & 0x00ff, ct >> 8 & 0x00ff, ct & 0x00ff]));\n    ct++;\n    offset = 0;\n  };\n\n  nextT(); // 先生成 Ha1\n\n  for (var i = 0, len = msg.length; i < len; i++) {\n    // t = Ha1 || Ha2 || Ha3 || Ha4\n    if (offset === t.length) nextT(); // c2 = msg ^ t\n\n    msg[i] ^= t[offset++] & 0xff;\n  }\n\n  var c2 = _.arrayToHex(msg);\n\n  return cipherMode === C1C2C3 ? c1 + c2 + c3 : c1 + c3 + c2;\n}\n/**\n * 解密\n */\n\n\nfunction doDecrypt(encryptData, privateKey, cipherMode, _a) {\n  if (cipherMode === void 0) {\n    cipherMode = 1;\n  }\n\n  var _b = _a === void 0 ? {} : _a,\n      _c = _b.output,\n      output = _c === void 0 ? 'string' : _c;\n\n  privateKey = new BigInteger(privateKey, 16);\n  var c3 = encryptData.substr(128, 64);\n  var c2 = encryptData.substr(128 + 64);\n\n  if (cipherMode === C1C2C3) {\n    c3 = encryptData.substr(encryptData.length - 64);\n    c2 = encryptData.substr(128, encryptData.length - 128 - 64);\n  }\n\n  var msg = _.hexToArray(c2);\n\n  var c1 = _.getGlobalCurve().decodePointHex('04' + encryptData.substr(0, 128));\n\n  var p = c1.multiply(privateKey);\n\n  var x2 = _.hexToArray(_.leftPad(p.getX().toBigInteger().toRadix(16), 64));\n\n  var y2 = _.hexToArray(_.leftPad(p.getY().toBigInteger().toRadix(16), 64));\n\n  var ct = 1;\n  var offset = 0;\n  var t = []; // 256 位\n\n  var z = [].concat(x2, y2);\n\n  var nextT = function () {\n    // (1) Hai = hash(z || ct)\n    // (2) ct++\n    t = sm3(__spreadArray(__spreadArray([], z), [ct >> 24 & 0x00ff, ct >> 16 & 0x00ff, ct >> 8 & 0x00ff, ct & 0x00ff]));\n    ct++;\n    offset = 0;\n  };\n\n  nextT(); // 先生成 Ha1\n\n  for (var i = 0, len = msg.length; i < len; i++) {\n    // t = Ha1 || Ha2 || Ha3 || Ha4\n    if (offset === t.length) nextT(); // c2 = msg ^ t\n\n    msg[i] ^= t[offset++] & 0xff;\n  } // c3 = hash(x2 || msg || y2)\n\n\n  var checkC3 = _.arrayToHex(sm3([].concat(x2, msg, y2)));\n\n  if (checkC3 === c3) {\n    return output === 'array' ? msg : _.arrayToUtf8(msg);\n  } else {\n    return output === 'array' ? [] : '';\n  }\n}\n/**\n * 签名\n */\n\n\nfunction doSignature(msg, privateKey, _a) {\n  var _b = _a === void 0 ? {} : _a,\n      pointPool = _b.pointPool,\n      der = _b.der,\n      hash = _b.hash,\n      publicKey = _b.publicKey,\n      userId = _b.userId;\n\n  var hashHex = typeof msg === 'string' ? _.utf8ToHex(msg) : _.arrayToHex(msg);\n\n  if (hash) {\n    // sm3杂凑\n    publicKey = publicKey || getPublicKeyFromPrivateKey(privateKey);\n    hashHex = getHash(hashHex, publicKey, userId);\n  }\n\n  var dA = new BigInteger(privateKey, 16);\n  var e = new BigInteger(hashHex, 16); // k\n\n  var k = null;\n  var r = null;\n  var s = null;\n\n  do {\n    do {\n      var point = void 0;\n\n      if (pointPool && pointPool.length) {\n        point = pointPool.pop();\n      } else {\n        point = getPoint();\n      }\n\n      k = point.k; // r = (e + x1) mod n\n\n      r = e.add(point.x1).mod(n);\n    } while (r.equals(BigInteger.ZERO) || r.add(k).equals(n)); // s = ((1 + dA)^-1 * (k - r * dA)) mod n\n\n\n    s = dA.add(BigInteger.ONE).modInverse(n).multiply(k.subtract(r.multiply(dA))).mod(n);\n  } while (s.equals(BigInteger.ZERO));\n\n  if (der) return encodeDer(r, s); // asn.1 der 编码\n\n  return _.leftPad(r.toString(16), 64) + _.leftPad(s.toString(16), 64);\n}\n/**\n * 验签\n */\n\n\nfunction doVerifySignature(msg, signHex, publicKey, _a) {\n  var _b = _a === void 0 ? {} : _a,\n      der = _b.der,\n      hash = _b.hash,\n      userId = _b.userId;\n\n  var hashHex = typeof msg === 'string' ? _.utf8ToHex(msg) : _.arrayToHex(msg);\n\n  if (hash) {\n    // sm3杂凑\n    hashHex = getHash(hashHex, publicKey, userId);\n  }\n\n  var r;\n  var s;\n\n  if (der) {\n    var decodeDerObj = decodeDer(signHex); // asn.1 der 解码\n\n    r = decodeDerObj.r;\n    s = decodeDerObj.s;\n  } else {\n    r = new BigInteger(signHex.substring(0, 64), 16);\n    s = new BigInteger(signHex.substring(64), 16);\n  }\n\n  var PA = curve.decodePointHex(publicKey);\n  var e = new BigInteger(hashHex, 16); // t = (r + s) mod n\n\n  var t = r.add(s).mod(n);\n  if (t.equals(BigInteger.ZERO)) return false; // x1y1 = s * G + t * PA\n\n  var x1y1 = G.multiply(s).add(PA.multiply(t)); // R = (e + x1) mod n\n\n  var R = e.add(x1y1.getX().toBigInteger()).mod(n);\n  return r.equals(R);\n}\n/**\n * sm3杂凑算法\n */\n\n\nfunction getHash(hashHex, publicKey, userId) {\n  if (userId === void 0) {\n    userId = '1234567812345678';\n  } // z = hash(entl || userId || a || b || gx || gy || px || py)\n\n\n  userId = _.utf8ToHex(userId);\n\n  var a = _.leftPad(G.curve.a.toBigInteger().toRadix(16), 64);\n\n  var b = _.leftPad(G.curve.b.toBigInteger().toRadix(16), 64);\n\n  var gx = _.leftPad(G.getX().toBigInteger().toRadix(16), 64);\n\n  var gy = _.leftPad(G.getY().toBigInteger().toRadix(16), 64);\n\n  if (publicKey.length > 128) publicKey = publicKey.substr(2, 128); // 干掉 '04'\n\n  var px = publicKey.substr(0, 64);\n  var py = publicKey.substr(64, 64);\n\n  var data = _.hexToArray(userId + a + b + gx + gy + px + py);\n\n  var entl = userId.length * 4;\n  data.unshift(entl & 0x00ff);\n  data.unshift(entl >> 8 & 0x00ff);\n  var z = sm3(data); // e = hash(z || msg)\n\n  return _.arrayToHex(sm3(z.concat(_.hexToArray(hashHex))));\n}\n/**\n * 计算公钥\n */\n\n\nfunction getPublicKeyFromPrivateKey(privateKey) {\n  var PA = G.multiply(new BigInteger(privateKey, 16));\n\n  var x = _.leftPad(PA.getX().toBigInteger().toString(16), 64);\n\n  var y = _.leftPad(PA.getY().toBigInteger().toString(16), 64);\n\n  return '04' + x + y;\n}\n/**\n * 获取椭圆曲线点\n */\n\n\nfunction getPoint() {\n  var keypair = _.generateKeyPairHex();\n\n  var PA = curve.decodePointHex(keypair.publicKey);\n  keypair.k = new BigInteger(keypair.privateKey, 16);\n  keypair.x1 = PA.getX().toBigInteger();\n  return keypair;\n}\n\nexport var generateKeyPairHex = _.generateKeyPairHex;\nexport var verifyPublicKey = _.verifyPublicKey;\nexport { doEncrypt, doDecrypt, doSignature, doVerifySignature, getPoint };","map":{"version":3,"sources":["../../../../../src/lib/sm-crypto/sm2/index.js"],"names":[],"mappings":";;;;;;AAAA,SAAS,UAAT,QAA2B,MAA3B;AACA,SAAS,SAAT,EAAoB,SAApB,QAAqC,QAArC;AACA,OAAO,KAAK,CAAZ,MAAmB,SAAnB;AACA,OAAO,GAAP,MAAgB,OAAhB;;AAEM,IAAA,EAAA,GAAkB,CAAC,CAAC,eAAF,EAAlB;AAAA,IAAE,CAAC,GAAA,EAAA,CAAA,CAAH;AAAA,IAAK,KAAK,GAAA,EAAA,CAAA,KAAV;AAAA,IAAY,CAAC,GAAA,EAAA,CAAA,CAAb;;AACN,IAAM,MAAM,GAAG,CAAf;AAEA;;AAEG;;AACH,SAAS,SAAT,CAAmB,GAAnB,EAAwB,SAAxB,EAAmC,UAAnC,EAAiD;AAAd,MAAA,UAAA,KAAA,KAAA,CAAA,EAAA;AAAA,IAAA,UAAA,GAAA,CAAA;AAAc;;AAC/C,EAAA,GAAG,GACD,OAAO,GAAP,KAAe,QAAf,GACI,CAAC,CAAC,UAAF,CAAa,CAAC,CAAC,SAAF,CAAY,GAAZ,CAAb,CADJ,GAEI,KAAK,CAAC,SAAN,CAAgB,KAAhB,CAAsB,IAAtB,CAA2B,GAA3B,CAHN;AAIA,EAAA,SAAS,GAAG,CAAC,CAAC,cAAF,GAAmB,cAAnB,CAAkC,SAAlC,CAAZ,CAL+C,CAKW;;AAE1D,MAAM,OAAO,GAAG,CAAC,CAAC,kBAAF,EAAhB;;AACA,MAAM,CAAC,GAAG,IAAI,UAAJ,CAAe,OAAO,CAAC,UAAvB,EAAmC,EAAnC,CAAV,CAR+C,CAQG;AAElD;;AACA,MAAI,EAAE,GAAG,OAAO,CAAC,SAAjB;AACA,MAAI,EAAE,CAAC,MAAH,GAAY,GAAhB,EAAqB,EAAE,GAAG,EAAE,CAAC,MAAH,CAAU,EAAE,CAAC,MAAH,GAAY,GAAtB,CAAL,CAZ0B,CAc/C;;AACA,MAAM,CAAC,GAAG,SAAS,CAAC,QAAV,CAAmB,CAAnB,CAAV;;AACA,MAAM,EAAE,GAAG,CAAC,CAAC,UAAF,CACT,CAAC,CAAC,OAAF,CACE,CAAC,CACE,IADH,GAEG,YAFH,GAGG,OAHH,CAGW,EAHX,CADF,EAKE,EALF,CADS,CAAX;;AASA,MAAM,EAAE,GAAG,CAAC,CAAC,UAAF,CACT,CAAC,CAAC,OAAF,CACE,CAAC,CACE,IADH,GAEG,YAFH,GAGG,OAHH,CAGW,EAHX,CADF,EAKE,EALF,CADS,CAAX,CAzB+C,CAmC/C;;;AACA,MAAM,EAAE,GAAG,CAAC,CAAC,UAAF,CAAa,GAAG,CAAC,GAAG,MAAH,CAAU,EAAV,EAAc,GAAd,EAAmB,EAAnB,CAAD,CAAhB,CAAX;;AAEA,MAAI,EAAE,GAAG,CAAT;AACA,MAAI,MAAM,GAAG,CAAb;AACA,MAAI,CAAC,GAAG,EAAR,CAxC+C,CAwCnC;;AACZ,MAAM,CAAC,GAAG,GAAG,MAAH,CAAU,EAAV,EAAc,EAAd,CAAV;;AACA,MAAM,KAAK,GAAG,YAAA;AACZ;AACA;AACA,IAAA,CAAC,GAAG,GAAG,CAAA,aAAA,CAAA,aAAA,CAAA,EAAA,EACF,CADE,CAAA,EACD,CACH,EAAE,IAAI,EAAP,GAAa,MADT,EAEH,EAAE,IAAI,EAAP,GAAa,MAFT,EAGH,EAAE,IAAI,CAAP,GAAY,MAHR,EAIJ,EAAE,GAAG,MAJD,CADC,CAAA,CAAP;AAOA,IAAA,EAAE;AACF,IAAA,MAAM,GAAG,CAAT;AACD,GAZD;;AAaA,EAAA,KAAK,GAvD0C,CAuDtC;;AAET,OAAK,IAAI,CAAC,GAAG,CAAR,EAAW,GAAG,GAAG,GAAG,CAAC,MAA1B,EAAkC,CAAC,GAAG,GAAtC,EAA2C,CAAC,EAA5C,EAAgD;AAC9C;AACA,QAAI,MAAM,KAAK,CAAC,CAAC,MAAjB,EAAyB,KAAK,GAFgB,CAI9C;;AACA,IAAA,GAAG,CAAC,CAAD,CAAH,IAAU,CAAC,CAAC,MAAM,EAAP,CAAD,GAAc,IAAxB;AACD;;AACD,MAAM,EAAE,GAAG,CAAC,CAAC,UAAF,CAAa,GAAb,CAAX;;AAEA,SAAO,UAAU,KAAK,MAAf,GAAwB,EAAE,GAAG,EAAL,GAAU,EAAlC,GAAuC,EAAE,GAAG,EAAL,GAAU,EAAxD;AACD;AAED;;AAEG;;;AACH,SAAS,SAAT,CACE,WADF,EAEE,UAFF,EAGE,UAHF,EAIE,EAJF,EAI4B;AAD1B,MAAA,UAAA,KAAA,KAAA,CAAA,EAAA;AAAA,IAAA,UAAA,GAAA,CAAA;AAAc;;MACd,EAAA,GAAA,EAAA,KAAA,KAAA,CAAA,GAAwB,EAAxB,GAA0B,E;MAAxB,EAAA,GAAA,EAAA,CAAA,M;MAAA,MAAM,GAAA,EAAA,KAAA,KAAA,CAAA,GAAG,QAAH,GAAW,E;;AAEnB,EAAA,UAAU,GAAG,IAAI,UAAJ,CAAe,UAAf,EAA2B,EAA3B,CAAb;AAEA,MAAI,EAAE,GAAG,WAAW,CAAC,MAAZ,CAAmB,GAAnB,EAAwB,EAAxB,CAAT;AACA,MAAI,EAAE,GAAG,WAAW,CAAC,MAAZ,CAAmB,MAAM,EAAzB,CAAT;;AAEA,MAAI,UAAU,KAAK,MAAnB,EAA2B;AACzB,IAAA,EAAE,GAAG,WAAW,CAAC,MAAZ,CAAmB,WAAW,CAAC,MAAZ,GAAqB,EAAxC,CAAL;AACA,IAAA,EAAE,GAAG,WAAW,CAAC,MAAZ,CAAmB,GAAnB,EAAwB,WAAW,CAAC,MAAZ,GAAqB,GAArB,GAA2B,EAAnD,CAAL;AACD;;AAED,MAAM,GAAG,GAAG,CAAC,CAAC,UAAF,CAAa,EAAb,CAAZ;;AACA,MAAM,EAAE,GAAG,CAAC,CAAC,cAAF,GAAmB,cAAnB,CACT,OAAO,WAAW,CAAC,MAAZ,CAAmB,CAAnB,EAAsB,GAAtB,CADE,CAAX;;AAIA,MAAM,CAAC,GAAG,EAAE,CAAC,QAAH,CAAY,UAAZ,CAAV;;AACA,MAAM,EAAE,GAAG,CAAC,CAAC,UAAF,CACT,CAAC,CAAC,OAAF,CACE,CAAC,CACE,IADH,GAEG,YAFH,GAGG,OAHH,CAGW,EAHX,CADF,EAKE,EALF,CADS,CAAX;;AASA,MAAM,EAAE,GAAG,CAAC,CAAC,UAAF,CACT,CAAC,CAAC,OAAF,CACE,CAAC,CACE,IADH,GAEG,YAFH,GAGG,OAHH,CAGW,EAHX,CADF,EAKE,EALF,CADS,CAAX;;AAUA,MAAI,EAAE,GAAG,CAAT;AACA,MAAI,MAAM,GAAG,CAAb;AACA,MAAI,CAAC,GAAG,EAAR,CAvC0B,CAuCd;;AACZ,MAAM,CAAC,GAAG,GAAG,MAAH,CAAU,EAAV,EAAc,EAAd,CAAV;;AACA,MAAM,KAAK,GAAG,YAAA;AACZ;AACA;AACA,IAAA,CAAC,GAAG,GAAG,CAAA,aAAA,CAAA,aAAA,CAAA,EAAA,EACF,CADE,CAAA,EACD,CACH,EAAE,IAAI,EAAP,GAAa,MADT,EAEH,EAAE,IAAI,EAAP,GAAa,MAFT,EAGH,EAAE,IAAI,CAAP,GAAY,MAHR,EAIJ,EAAE,GAAG,MAJD,CADC,CAAA,CAAP;AAOA,IAAA,EAAE;AACF,IAAA,MAAM,GAAG,CAAT;AACD,GAZD;;AAaA,EAAA,KAAK,GAtDqB,CAsDjB;;AAET,OAAK,IAAI,CAAC,GAAG,CAAR,EAAW,GAAG,GAAG,GAAG,CAAC,MAA1B,EAAkC,CAAC,GAAG,GAAtC,EAA2C,CAAC,EAA5C,EAAgD;AAC9C;AACA,QAAI,MAAM,KAAK,CAAC,CAAC,MAAjB,EAAyB,KAAK,GAFgB,CAI9C;;AACA,IAAA,GAAG,CAAC,CAAD,CAAH,IAAU,CAAC,CAAC,MAAM,EAAP,CAAD,GAAc,IAAxB;AACD,GA9DyB,CAgE1B;;;AACA,MAAM,OAAO,GAAG,CAAC,CAAC,UAAF,CAAa,GAAG,CAAC,GAAG,MAAH,CAAU,EAAV,EAAc,GAAd,EAAmB,EAAnB,CAAD,CAAhB,CAAhB;;AAEA,MAAI,OAAO,KAAK,EAAhB,EAAoB;AAClB,WAAO,MAAM,KAAK,OAAX,GAAqB,GAArB,GAA2B,CAAC,CAAC,WAAF,CAAc,GAAd,CAAlC;AACD,GAFD,MAEO;AACL,WAAO,MAAM,KAAK,OAAX,GAAqB,EAArB,GAA0B,EAAjC;AACD;AACF;AAED;;AAEG;;;AACH,SAAS,WAAT,CACE,GADF,EAEE,UAFF,EAGE,EAHF,EAGkD;MAAhD,EAAA,GAAA,EAAA,KAAA,KAAA,CAAA,GAA8C,EAA9C,GAAgD,E;MAA9C,SAAS,GAAA,EAAA,CAAA,S;MAAE,GAAG,GAAA,EAAA,CAAA,G;MAAE,IAAI,GAAA,EAAA,CAAA,I;MAAE,SAAS,GAAA,EAAA,CAAA,S;MAAE,MAAM,GAAA,EAAA,CAAA,M;;AAEzC,MAAI,OAAO,GAAG,OAAO,GAAP,KAAe,QAAf,GAA0B,CAAC,CAAC,SAAF,CAAY,GAAZ,CAA1B,GAA6C,CAAC,CAAC,UAAF,CAAa,GAAb,CAA3D;;AAEA,MAAI,IAAJ,EAAU;AACR;AACA,IAAA,SAAS,GAAG,SAAS,IAAI,0BAA0B,CAAC,UAAD,CAAnD;AACA,IAAA,OAAO,GAAG,OAAO,CAAC,OAAD,EAAU,SAAV,EAAqB,MAArB,CAAjB;AACD;;AAED,MAAM,EAAE,GAAG,IAAI,UAAJ,CAAe,UAAf,EAA2B,EAA3B,CAAX;AACA,MAAM,CAAC,GAAG,IAAI,UAAJ,CAAe,OAAf,EAAwB,EAAxB,CAAV,CAXgD,CAahD;;AACA,MAAI,CAAC,GAAG,IAAR;AACA,MAAI,CAAC,GAAG,IAAR;AACA,MAAI,CAAC,GAAG,IAAR;;AAEA,KAAG;AACD,OAAG;AACD,UAAI,KAAK,GAAA,KAAA,CAAT;;AACA,UAAI,SAAS,IAAI,SAAS,CAAC,MAA3B,EAAmC;AACjC,QAAA,KAAK,GAAG,SAAS,CAAC,GAAV,EAAR;AACD,OAFD,MAEO;AACL,QAAA,KAAK,GAAG,QAAQ,EAAhB;AACD;;AACD,MAAA,CAAC,GAAG,KAAK,CAAC,CAAV,CAPC,CASD;;AACA,MAAA,CAAC,GAAG,CAAC,CAAC,GAAF,CAAM,KAAK,CAAC,EAAZ,EAAgB,GAAhB,CAAoB,CAApB,CAAJ;AACD,KAXD,QAWS,CAAC,CAAC,MAAF,CAAS,UAAU,CAAC,IAApB,KAA6B,CAAC,CAAC,GAAF,CAAM,CAAN,EAAS,MAAT,CAAgB,CAAhB,CAXtC,EADC,CAcD;;;AACA,IAAA,CAAC,GAAG,EAAE,CACH,GADC,CACG,UAAU,CAAC,GADd,EAED,UAFC,CAEU,CAFV,EAGD,QAHC,CAGQ,CAAC,CAAC,QAAF,CAAW,CAAC,CAAC,QAAF,CAAW,EAAX,CAAX,CAHR,EAID,GAJC,CAIG,CAJH,CAAJ;AAKD,GApBD,QAoBS,CAAC,CAAC,MAAF,CAAS,UAAU,CAAC,IAApB,CApBT;;AAsBA,MAAI,GAAJ,EAAS,OAAO,SAAS,CAAC,CAAD,EAAI,CAAJ,CAAhB,CAxCuC,CAwCf;;AAEjC,SAAO,CAAC,CAAC,OAAF,CAAU,CAAC,CAAC,QAAF,CAAW,EAAX,CAAV,EAA0B,EAA1B,IAAgC,CAAC,CAAC,OAAF,CAAU,CAAC,CAAC,QAAF,CAAW,EAAX,CAAV,EAA0B,EAA1B,CAAvC;AACD;AAED;;AAEG;;;AACH,SAAS,iBAAT,CACE,GADF,EAEE,OAFF,EAGE,SAHF,EAIE,EAJF,EAI4B;MAA1B,EAAA,GAAA,EAAA,KAAA,KAAA,CAAA,GAAwB,EAAxB,GAA0B,E;MAAxB,GAAG,GAAA,EAAA,CAAA,G;MAAE,IAAI,GAAA,EAAA,CAAA,I;MAAE,MAAM,GAAA,EAAA,CAAA,M;;AAEnB,MAAI,OAAO,GAAG,OAAO,GAAP,KAAe,QAAf,GAA0B,CAAC,CAAC,SAAF,CAAY,GAAZ,CAA1B,GAA6C,CAAC,CAAC,UAAF,CAAa,GAAb,CAA3D;;AAEA,MAAI,IAAJ,EAAU;AACR;AACA,IAAA,OAAO,GAAG,OAAO,CAAC,OAAD,EAAU,SAAV,EAAqB,MAArB,CAAjB;AACD;;AAED,MAAI,CAAJ;AACA,MAAI,CAAJ;;AACA,MAAI,GAAJ,EAAS;AACP,QAAM,YAAY,GAAG,SAAS,CAAC,OAAD,CAA9B,CADO,CACkC;;AACzC,IAAA,CAAC,GAAG,YAAY,CAAC,CAAjB;AACA,IAAA,CAAC,GAAG,YAAY,CAAC,CAAjB;AACD,GAJD,MAIO;AACL,IAAA,CAAC,GAAG,IAAI,UAAJ,CAAe,OAAO,CAAC,SAAR,CAAkB,CAAlB,EAAqB,EAArB,CAAf,EAAyC,EAAzC,CAAJ;AACA,IAAA,CAAC,GAAG,IAAI,UAAJ,CAAe,OAAO,CAAC,SAAR,CAAkB,EAAlB,CAAf,EAAsC,EAAtC,CAAJ;AACD;;AAED,MAAM,EAAE,GAAG,KAAK,CAAC,cAAN,CAAqB,SAArB,CAAX;AACA,MAAM,CAAC,GAAG,IAAI,UAAJ,CAAe,OAAf,EAAwB,EAAxB,CAAV,CArB0B,CAuB1B;;AACA,MAAM,CAAC,GAAG,CAAC,CAAC,GAAF,CAAM,CAAN,EAAS,GAAT,CAAa,CAAb,CAAV;AAEA,MAAI,CAAC,CAAC,MAAF,CAAS,UAAU,CAAC,IAApB,CAAJ,EAA+B,OAAO,KAAP,CA1BL,CA4B1B;;AACA,MAAM,IAAI,GAAG,CAAC,CAAC,QAAF,CAAW,CAAX,EAAc,GAAd,CAAkB,EAAE,CAAC,QAAH,CAAY,CAAZ,CAAlB,CAAb,CA7B0B,CA+B1B;;AACA,MAAM,CAAC,GAAG,CAAC,CAAC,GAAF,CAAM,IAAI,CAAC,IAAL,GAAY,YAAZ,EAAN,EAAkC,GAAlC,CAAsC,CAAtC,CAAV;AAEA,SAAO,CAAC,CAAC,MAAF,CAAS,CAAT,CAAP;AACD;AAED;;AAEG;;;AACH,SAAS,OAAT,CAAiB,OAAjB,EAA0B,SAA1B,EAAqC,MAArC,EAAgE;AAA3B,MAAA,MAAA,KAAA,KAAA,CAAA,EAAA;AAAA,IAAA,MAAA,GAAA,kBAAA;AAA2B,GAAA,CAC9D;;;AACA,EAAA,MAAM,GAAG,CAAC,CAAC,SAAF,CAAY,MAAZ,CAAT;;AACA,MAAM,CAAC,GAAG,CAAC,CAAC,OAAF,CAAU,CAAC,CAAC,KAAF,CAAQ,CAAR,CAAU,YAAV,GAAyB,OAAzB,CAAiC,EAAjC,CAAV,EAAgD,EAAhD,CAAV;;AACA,MAAM,CAAC,GAAG,CAAC,CAAC,OAAF,CAAU,CAAC,CAAC,KAAF,CAAQ,CAAR,CAAU,YAAV,GAAyB,OAAzB,CAAiC,EAAjC,CAAV,EAAgD,EAAhD,CAAV;;AACA,MAAM,EAAE,GAAG,CAAC,CAAC,OAAF,CACT,CAAC,CAAC,IAAF,GACG,YADH,GAEG,OAFH,CAEW,EAFX,CADS,EAIT,EAJS,CAAX;;AAMA,MAAM,EAAE,GAAG,CAAC,CAAC,OAAF,CACT,CAAC,CAAC,IAAF,GACG,YADH,GAEG,OAFH,CAEW,EAFX,CADS,EAIT,EAJS,CAAX;;AAMA,MAAI,SAAS,CAAC,MAAV,GAAmB,GAAvB,EAA4B,SAAS,GAAG,SAAS,CAAC,MAAV,CAAiB,CAAjB,EAAoB,GAApB,CAAZ,CAjBkC,CAiBI;;AAClE,MAAM,EAAE,GAAG,SAAS,CAAC,MAAV,CAAiB,CAAjB,EAAoB,EAApB,CAAX;AACA,MAAM,EAAE,GAAG,SAAS,CAAC,MAAV,CAAiB,EAAjB,EAAqB,EAArB,CAAX;;AACA,MAAM,IAAI,GAAG,CAAC,CAAC,UAAF,CAAa,MAAM,GAAG,CAAT,GAAa,CAAb,GAAiB,EAAjB,GAAsB,EAAtB,GAA2B,EAA3B,GAAgC,EAA7C,CAAb;;AAEA,MAAM,IAAI,GAAG,MAAM,CAAC,MAAP,GAAgB,CAA7B;AACA,EAAA,IAAI,CAAC,OAAL,CAAa,IAAI,GAAG,MAApB;AACA,EAAA,IAAI,CAAC,OAAL,CAAc,IAAI,IAAI,CAAT,GAAc,MAA3B;AAEA,MAAM,CAAC,GAAG,GAAG,CAAC,IAAD,CAAb,CA1B8D,CA4B9D;;AACA,SAAO,CAAC,CAAC,UAAF,CAAa,GAAG,CAAC,CAAC,CAAC,MAAF,CAAS,CAAC,CAAC,UAAF,CAAa,OAAb,CAAT,CAAD,CAAhB,CAAP;AACD;AAED;;AAEG;;;AACH,SAAS,0BAAT,CAAoC,UAApC,EAA8C;AAC5C,MAAM,EAAE,GAAG,CAAC,CAAC,QAAF,CAAW,IAAI,UAAJ,CAAe,UAAf,EAA2B,EAA3B,CAAX,CAAX;;AACA,MAAM,CAAC,GAAG,CAAC,CAAC,OAAF,CACR,EAAE,CAAC,IAAH,GACG,YADH,GAEG,QAFH,CAEY,EAFZ,CADQ,EAIR,EAJQ,CAAV;;AAMA,MAAM,CAAC,GAAG,CAAC,CAAC,OAAF,CACR,EAAE,CAAC,IAAH,GACG,YADH,GAEG,QAFH,CAEY,EAFZ,CADQ,EAIR,EAJQ,CAAV;;AAMA,SAAO,OAAO,CAAP,GAAW,CAAlB;AACD;AAED;;AAEG;;;AACH,SAAS,QAAT,GAAiB;AACf,MAAM,OAAO,GAAG,CAAC,CAAC,kBAAF,EAAhB;;AACA,MAAM,EAAE,GAAG,KAAK,CAAC,cAAN,CAAqB,OAAO,CAAC,SAA7B,CAAX;AAEA,EAAA,OAAO,CAAC,CAAR,GAAY,IAAI,UAAJ,CAAe,OAAO,CAAC,UAAvB,EAAmC,EAAnC,CAAZ;AACA,EAAA,OAAO,CAAC,EAAR,GAAa,EAAE,CAAC,IAAH,GAAU,YAAV,EAAb;AAEA,SAAO,OAAP;AACD;;AAED,OAAO,IAAM,kBAAkB,GAAG,CAAC,CAAC,kBAA7B;AACP,OAAO,IAAM,eAAe,GAAG,CAAC,CAAC,eAA1B;AAEP,SAAS,SAAT,EAAoB,SAApB,EAA+B,WAA/B,EAA4C,iBAA5C,EAA+D,QAA/D","sourceRoot":"","sourcesContent":["var __spreadArray = (this && this.__spreadArray) || function (to, from) {\n    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)\n        to[j] = from[i];\n    return to;\n};\nimport { BigInteger } from 'jsbn';\nimport { encodeDer, decodeDer } from './asn1';\nimport * as _ from './utils';\nimport sm3 from './sm3';\nvar _a = _.generateEcparam(), G = _a.G, curve = _a.curve, n = _a.n;\nvar C1C2C3 = 0;\n/**\n * 加密\n */\nfunction doEncrypt(msg, publicKey, cipherMode) {\n    if (cipherMode === void 0) { cipherMode = 1; }\n    msg =\n        typeof msg === 'string'\n            ? _.hexToArray(_.utf8ToHex(msg))\n            : Array.prototype.slice.call(msg);\n    publicKey = _.getGlobalCurve().decodePointHex(publicKey); // 先将公钥转成点\n    var keypair = _.generateKeyPairHex();\n    var k = new BigInteger(keypair.privateKey, 16); // 随机数 k\n    // c1 = k * G\n    var c1 = keypair.publicKey;\n    if (c1.length > 128)\n        c1 = c1.substr(c1.length - 128);\n    // (x2, y2) = k * publicKey\n    var p = publicKey.multiply(k);\n    var x2 = _.hexToArray(_.leftPad(p\n        .getX()\n        .toBigInteger()\n        .toRadix(16), 64));\n    var y2 = _.hexToArray(_.leftPad(p\n        .getY()\n        .toBigInteger()\n        .toRadix(16), 64));\n    // c3 = hash(x2 || msg || y2)\n    var c3 = _.arrayToHex(sm3([].concat(x2, msg, y2)));\n    var ct = 1;\n    var offset = 0;\n    var t = []; // 256 位\n    var z = [].concat(x2, y2);\n    var nextT = function () {\n        // (1) Hai = hash(z || ct)\n        // (2) ct++\n        t = sm3(__spreadArray(__spreadArray([], z), [\n            (ct >> 24) & 0x00ff,\n            (ct >> 16) & 0x00ff,\n            (ct >> 8) & 0x00ff,\n            ct & 0x00ff\n        ]));\n        ct++;\n        offset = 0;\n    };\n    nextT(); // 先生成 Ha1\n    for (var i = 0, len = msg.length; i < len; i++) {\n        // t = Ha1 || Ha2 || Ha3 || Ha4\n        if (offset === t.length)\n            nextT();\n        // c2 = msg ^ t\n        msg[i] ^= t[offset++] & 0xff;\n    }\n    var c2 = _.arrayToHex(msg);\n    return cipherMode === C1C2C3 ? c1 + c2 + c3 : c1 + c3 + c2;\n}\n/**\n * 解密\n */\nfunction doDecrypt(encryptData, privateKey, cipherMode, _a) {\n    if (cipherMode === void 0) { cipherMode = 1; }\n    var _b = _a === void 0 ? {} : _a, _c = _b.output, output = _c === void 0 ? 'string' : _c;\n    privateKey = new BigInteger(privateKey, 16);\n    var c3 = encryptData.substr(128, 64);\n    var c2 = encryptData.substr(128 + 64);\n    if (cipherMode === C1C2C3) {\n        c3 = encryptData.substr(encryptData.length - 64);\n        c2 = encryptData.substr(128, encryptData.length - 128 - 64);\n    }\n    var msg = _.hexToArray(c2);\n    var c1 = _.getGlobalCurve().decodePointHex('04' + encryptData.substr(0, 128));\n    var p = c1.multiply(privateKey);\n    var x2 = _.hexToArray(_.leftPad(p\n        .getX()\n        .toBigInteger()\n        .toRadix(16), 64));\n    var y2 = _.hexToArray(_.leftPad(p\n        .getY()\n        .toBigInteger()\n        .toRadix(16), 64));\n    var ct = 1;\n    var offset = 0;\n    var t = []; // 256 位\n    var z = [].concat(x2, y2);\n    var nextT = function () {\n        // (1) Hai = hash(z || ct)\n        // (2) ct++\n        t = sm3(__spreadArray(__spreadArray([], z), [\n            (ct >> 24) & 0x00ff,\n            (ct >> 16) & 0x00ff,\n            (ct >> 8) & 0x00ff,\n            ct & 0x00ff\n        ]));\n        ct++;\n        offset = 0;\n    };\n    nextT(); // 先生成 Ha1\n    for (var i = 0, len = msg.length; i < len; i++) {\n        // t = Ha1 || Ha2 || Ha3 || Ha4\n        if (offset === t.length)\n            nextT();\n        // c2 = msg ^ t\n        msg[i] ^= t[offset++] & 0xff;\n    }\n    // c3 = hash(x2 || msg || y2)\n    var checkC3 = _.arrayToHex(sm3([].concat(x2, msg, y2)));\n    if (checkC3 === c3) {\n        return output === 'array' ? msg : _.arrayToUtf8(msg);\n    }\n    else {\n        return output === 'array' ? [] : '';\n    }\n}\n/**\n * 签名\n */\nfunction doSignature(msg, privateKey, _a) {\n    var _b = _a === void 0 ? {} : _a, pointPool = _b.pointPool, der = _b.der, hash = _b.hash, publicKey = _b.publicKey, userId = _b.userId;\n    var hashHex = typeof msg === 'string' ? _.utf8ToHex(msg) : _.arrayToHex(msg);\n    if (hash) {\n        // sm3杂凑\n        publicKey = publicKey || getPublicKeyFromPrivateKey(privateKey);\n        hashHex = getHash(hashHex, publicKey, userId);\n    }\n    var dA = new BigInteger(privateKey, 16);\n    var e = new BigInteger(hashHex, 16);\n    // k\n    var k = null;\n    var r = null;\n    var s = null;\n    do {\n        do {\n            var point = void 0;\n            if (pointPool && pointPool.length) {\n                point = pointPool.pop();\n            }\n            else {\n                point = getPoint();\n            }\n            k = point.k;\n            // r = (e + x1) mod n\n            r = e.add(point.x1).mod(n);\n        } while (r.equals(BigInteger.ZERO) || r.add(k).equals(n));\n        // s = ((1 + dA)^-1 * (k - r * dA)) mod n\n        s = dA\n            .add(BigInteger.ONE)\n            .modInverse(n)\n            .multiply(k.subtract(r.multiply(dA)))\n            .mod(n);\n    } while (s.equals(BigInteger.ZERO));\n    if (der)\n        return encodeDer(r, s); // asn.1 der 编码\n    return _.leftPad(r.toString(16), 64) + _.leftPad(s.toString(16), 64);\n}\n/**\n * 验签\n */\nfunction doVerifySignature(msg, signHex, publicKey, _a) {\n    var _b = _a === void 0 ? {} : _a, der = _b.der, hash = _b.hash, userId = _b.userId;\n    var hashHex = typeof msg === 'string' ? _.utf8ToHex(msg) : _.arrayToHex(msg);\n    if (hash) {\n        // sm3杂凑\n        hashHex = getHash(hashHex, publicKey, userId);\n    }\n    var r;\n    var s;\n    if (der) {\n        var decodeDerObj = decodeDer(signHex); // asn.1 der 解码\n        r = decodeDerObj.r;\n        s = decodeDerObj.s;\n    }\n    else {\n        r = new BigInteger(signHex.substring(0, 64), 16);\n        s = new BigInteger(signHex.substring(64), 16);\n    }\n    var PA = curve.decodePointHex(publicKey);\n    var e = new BigInteger(hashHex, 16);\n    // t = (r + s) mod n\n    var t = r.add(s).mod(n);\n    if (t.equals(BigInteger.ZERO))\n        return false;\n    // x1y1 = s * G + t * PA\n    var x1y1 = G.multiply(s).add(PA.multiply(t));\n    // R = (e + x1) mod n\n    var R = e.add(x1y1.getX().toBigInteger()).mod(n);\n    return r.equals(R);\n}\n/**\n * sm3杂凑算法\n */\nfunction getHash(hashHex, publicKey, userId) {\n    if (userId === void 0) { userId = '1234567812345678'; }\n    // z = hash(entl || userId || a || b || gx || gy || px || py)\n    userId = _.utf8ToHex(userId);\n    var a = _.leftPad(G.curve.a.toBigInteger().toRadix(16), 64);\n    var b = _.leftPad(G.curve.b.toBigInteger().toRadix(16), 64);\n    var gx = _.leftPad(G.getX()\n        .toBigInteger()\n        .toRadix(16), 64);\n    var gy = _.leftPad(G.getY()\n        .toBigInteger()\n        .toRadix(16), 64);\n    if (publicKey.length > 128)\n        publicKey = publicKey.substr(2, 128); // 干掉 '04'\n    var px = publicKey.substr(0, 64);\n    var py = publicKey.substr(64, 64);\n    var data = _.hexToArray(userId + a + b + gx + gy + px + py);\n    var entl = userId.length * 4;\n    data.unshift(entl & 0x00ff);\n    data.unshift((entl >> 8) & 0x00ff);\n    var z = sm3(data);\n    // e = hash(z || msg)\n    return _.arrayToHex(sm3(z.concat(_.hexToArray(hashHex))));\n}\n/**\n * 计算公钥\n */\nfunction getPublicKeyFromPrivateKey(privateKey) {\n    var PA = G.multiply(new BigInteger(privateKey, 16));\n    var x = _.leftPad(PA.getX()\n        .toBigInteger()\n        .toString(16), 64);\n    var y = _.leftPad(PA.getY()\n        .toBigInteger()\n        .toString(16), 64);\n    return '04' + x + y;\n}\n/**\n * 获取椭圆曲线点\n */\nfunction getPoint() {\n    var keypair = _.generateKeyPairHex();\n    var PA = curve.decodePointHex(keypair.publicKey);\n    keypair.k = new BigInteger(keypair.privateKey, 16);\n    keypair.x1 = PA.getX().toBigInteger();\n    return keypair;\n}\nexport var generateKeyPairHex = _.generateKeyPairHex;\nexport var verifyPublicKey = _.verifyPublicKey;\nexport { doEncrypt, doDecrypt, doSignature, doVerifySignature, getPoint };\n//# sourceMappingURL=index.js.map"]},"metadata":{},"sourceType":"module"}