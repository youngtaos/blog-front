{"ast":null,"code":"var _jsxFileName = \"D:\\\\\\u684C\\u9762\\\\blog\\\\src\\\\admin\\\\container\\\\HomeManagement\\\\component\\\\Login\\\\index.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useCallback, useEffect, useMemo, useState } from 'react';\nimport { Authing } from '@authing/browser'; // import type { LoginState } from '@authing/browser/dist/types/global';\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Login = () => {\n  _s();\n\n  const sdk = useMemo(() => {\n    return new Authing({\n      domain: 'https://yutousi.authing.cn',\n      appId: '63858a0caa6255ed2a69abe7',\n      redirectUri: 'https://console.authing.cn/console/get-started/63858a0caa6255ed2a69abe7'\n    });\n  }, []);\n  const [loginState, setLoginState] = useState(); // 以跳转方式打开 Authing 托管的登录页\n\n  useEffect(() => {\n    sdk.loginWithRedirect();\n  }, []); // 获取用户的登录状态\n\n  const getLoginState = useCallback(async () => {\n    try {\n      const state = await sdk.getLoginState();\n      setLoginState(state);\n    } catch (error) {\n      console.log(error);\n    }\n  }, [sdk]);\n  useEffect(() => {\n    // 判断当前 URL 是否为 Authing 登录回调 URL\n    if (sdk.isRedirectCallback()) {\n      /**\r\n       * 以跳转方式打开 Authing 托管的登录页，认证成功后需要配合 \r\n       * handleRedirectCallback 方法，在回调端点处理 Authing 发送的\r\n       * 授权码或 token，获取用户登录态\r\n       */\n      sdk.handleRedirectCallback().then(res => setLoginState(res));\n    } else {\n      getLoginState();\n    }\n  }, [getLoginState, sdk]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Login, \"qJ12wCIrMuagJTLO/iK0pKOkAHQ=\");\n\n_c = Login;\nexport default Login;\n\nvar _c;\n\n$RefreshReg$(_c, \"Login\");","map":{"version":3,"sources":["D:/桌面/blog/src/admin/container/HomeManagement/component/Login/index.jsx"],"names":["React","useCallback","useEffect","useMemo","useState","Authing","Login","sdk","domain","appId","redirectUri","loginState","setLoginState","loginWithRedirect","getLoginState","state","error","console","log","isRedirectCallback","handleRedirectCallback","then","res"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,WAAhB,EAA6BC,SAA7B,EAAwCC,OAAxC,EAAiDC,QAAjD,QAAiE,OAAjE;AACA,SAASC,OAAT,QAAwB,kBAAxB,C,CACA;;;;AAEA,MAAMC,KAAK,GAAG,MAAM;AAAA;;AAChB,QAAMC,GAAG,GAAGJ,OAAO,CAAC,MAAM;AACtB,WAAO,IAAIE,OAAJ,CAAY;AACfG,MAAAA,MAAM,EAAE,4BADO;AAEfC,MAAAA,KAAK,EAAE,0BAFQ;AAGfC,MAAAA,WAAW,EAAE;AAHE,KAAZ,CAAP;AAKH,GANkB,EAMhB,EANgB,CAAnB;AAQA,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BR,QAAQ,EAA5C,CATgB,CAWhB;;AAEAF,EAAAA,SAAS,CAAC,MAAM;AACZK,IAAAA,GAAG,CAACM,iBAAJ;AACH,GAFQ,EAEN,EAFM,CAAT,CAbgB,CAiBhB;;AAEA,QAAMC,aAAa,GAAGb,WAAW,CAAC,YAAY;AAC1C,QAAI;AACA,YAAMc,KAAK,GAAG,MAAMR,GAAG,CAACO,aAAJ,EAApB;AACAF,MAAAA,aAAa,CAACG,KAAD,CAAb;AACH,KAHD,CAGE,OAAOC,KAAP,EAAc;AACZC,MAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACH;AACJ,GAPgC,EAO9B,CAACT,GAAD,CAP8B,CAAjC;AASAL,EAAAA,SAAS,CAAC,MAAM;AACZ;AACA,QAAIK,GAAG,CAACY,kBAAJ,EAAJ,EAA8B;AAC1B;AACZ;AACA;AACA;AACA;AACYZ,MAAAA,GAAG,CAACa,sBAAJ,GAA6BC,IAA7B,CAAmCC,GAAD,IAASV,aAAa,CAACU,GAAD,CAAxD;AACH,KAPD,MAOO;AACHR,MAAAA,aAAa;AAChB;AACJ,GAZQ,EAYN,CAACA,aAAD,EAAgBP,GAAhB,CAZM,CAAT;AAcA,sBACI;AAAK,IAAA,SAAS,EAAC;AAAf;AAAA;AAAA;AAAA;AAAA,UADJ;AAKH,CA/CD;;GAAMD,K;;KAAAA,K;AAgDN,eAAeA,KAAf","sourcesContent":["import React, { useCallback, useEffect, useMemo, useState } from 'react';\r\nimport { Authing } from '@authing/browser';\r\n// import type { LoginState } from '@authing/browser/dist/types/global';\r\n\r\nconst Login = () => {\r\n    const sdk = useMemo(() => {\r\n        return new Authing({\r\n            domain: 'https://yutousi.authing.cn',\r\n            appId: '63858a0caa6255ed2a69abe7',\r\n            redirectUri: 'https://console.authing.cn/console/get-started/63858a0caa6255ed2a69abe7',\r\n        });\r\n    }, []);\r\n\r\n    const [loginState, setLoginState] = useState();\r\n\r\n    // 以跳转方式打开 Authing 托管的登录页\r\n\r\n    useEffect(() => {\r\n        sdk.loginWithRedirect();\r\n    }, []);\r\n\r\n    // 获取用户的登录状态\r\n\r\n    const getLoginState = useCallback(async () => {\r\n        try {\r\n            const state = await sdk.getLoginState();\r\n            setLoginState(state);\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }, [sdk]);\r\n\r\n    useEffect(() => {\r\n        // 判断当前 URL 是否为 Authing 登录回调 URL\r\n        if (sdk.isRedirectCallback()) {\r\n            /**\r\n             * 以跳转方式打开 Authing 托管的登录页，认证成功后需要配合 \r\n             * handleRedirectCallback 方法，在回调端点处理 Authing 发送的\r\n             * 授权码或 token，获取用户登录态\r\n             */\r\n            sdk.handleRedirectCallback().then((res) => setLoginState(res));\r\n        } else {\r\n            getLoginState();\r\n        }\r\n    }, [getLoginState, sdk]);\r\n\r\n    return (\r\n        <div className=\"App\">\r\n\r\n        </div>\r\n    );\r\n}\r\nexport default Login;"]},"metadata":{},"sourceType":"module"}