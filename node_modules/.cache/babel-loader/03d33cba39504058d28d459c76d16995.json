{"ast":null,"code":"/* eslint-disable no-case-declarations, max-len */\nimport { BigInteger } from 'jsbn';\n/**\n * thanks for Tom Wu : http://www-cs-students.stanford.edu/~tjw/jsbn/\n *\n * Basic Javascript Elliptic Curve implementation\n * Ported loosely from BouncyCastle's Java EC code\n * Only Fp curves implemented for now\n */\n\nvar THREE = new BigInteger('3');\n/**\n * 椭圆曲线域元素\n */\n\nvar ECFieldElementFp = function () {\n  function ECFieldElementFp(q, x) {\n    this.x = x;\n    this.q = q; // TODO if (x.compareTo(q) >= 0) error\n  }\n  /**\n   * 判断相等\n   */\n\n\n  ECFieldElementFp.prototype.equals = function (other) {\n    if (other === this) return true;\n    return this.q.equals(other.q) && this.x.equals(other.x);\n  };\n  /**\n   * 返回具体数值\n   */\n\n\n  ECFieldElementFp.prototype.toBigInteger = function () {\n    return this.x;\n  };\n  /**\n   * 取反\n   */\n\n\n  ECFieldElementFp.prototype.negate = function () {\n    return new ECFieldElementFp(this.q, this.x.negate().mod(this.q));\n  };\n  /**\n   * 相加\n   */\n\n\n  ECFieldElementFp.prototype.add = function (b) {\n    return new ECFieldElementFp(this.q, this.x.add(b.toBigInteger()).mod(this.q));\n  };\n  /**\n   * 相减\n   */\n\n\n  ECFieldElementFp.prototype.subtract = function (b) {\n    return new ECFieldElementFp(this.q, this.x.subtract(b.toBigInteger()).mod(this.q));\n  };\n  /**\n   * 相乘\n   */\n\n\n  ECFieldElementFp.prototype.multiply = function (b) {\n    return new ECFieldElementFp(this.q, this.x.multiply(b.toBigInteger()).mod(this.q));\n  };\n  /**\n   * 相除\n   */\n\n\n  ECFieldElementFp.prototype.divide = function (b) {\n    return new ECFieldElementFp(this.q, this.x.multiply(b.toBigInteger().modInverse(this.q)).mod(this.q));\n  };\n  /**\n   * 平方\n   */\n\n\n  ECFieldElementFp.prototype.square = function () {\n    return new ECFieldElementFp(this.q, this.x.square().mod(this.q));\n  };\n\n  return ECFieldElementFp;\n}();\n\nvar ECPointFp = function () {\n  function ECPointFp(curve, x, y, z) {\n    this.curve = curve;\n    this.x = x;\n    this.y = y; // 标准射影坐标系：zinv == null 或 z * zinv == 1\n\n    this.z = z == null ? BigInteger.ONE : z;\n    this.zinv = null; // TODO: compression flag\n  }\n\n  ECPointFp.prototype.getX = function () {\n    if (this.zinv === null) this.zinv = this.z.modInverse(this.curve.q);\n    return this.curve.fromBigInteger(this.x.toBigInteger().multiply(this.zinv).mod(this.curve.q));\n  };\n\n  ECPointFp.prototype.getY = function () {\n    if (this.zinv === null) this.zinv = this.z.modInverse(this.curve.q);\n    return this.curve.fromBigInteger(this.y.toBigInteger().multiply(this.zinv).mod(this.curve.q));\n  };\n  /**\n   * 判断相等\n   */\n\n\n  ECPointFp.prototype.equals = function (other) {\n    if (other === this) return true;\n    if (this.isInfinity()) return other.isInfinity();\n    if (other.isInfinity()) return this.isInfinity(); // u = y2 * z1 - y1 * z2\n\n    var u = other.y.toBigInteger().multiply(this.z).subtract(this.y.toBigInteger().multiply(other.z)).mod(this.curve.q);\n    if (!u.equals(BigInteger.ZERO)) return false; // v = x2 * z1 - x1 * z2\n\n    var v = other.x.toBigInteger().multiply(this.z).subtract(this.x.toBigInteger().multiply(other.z)).mod(this.curve.q);\n    return v.equals(BigInteger.ZERO);\n  };\n  /**\n   * 是否是无穷远点\n   */\n\n\n  ECPointFp.prototype.isInfinity = function () {\n    if (this.x === null && this.y === null) return true;\n    return this.z.equals(BigInteger.ZERO) && !this.y.toBigInteger().equals(BigInteger.ZERO);\n  };\n  /**\n   * 取反，x 轴对称点\n   */\n\n\n  ECPointFp.prototype.negate = function () {\n    return new ECPointFp(this.curve, this.x, this.y.negate(), this.z);\n  };\n  /**\n   * 相加\n   *\n   * 标准射影坐标系：\n   *\n   * λ1 = x1 * z2\n   * λ2 = x2 * z1\n   * λ3 = λ1 − λ2\n   * λ4 = y1 * z2\n   * λ5 = y2 * z1\n   * λ6 = λ4 − λ5\n   * λ7 = λ1 + λ2\n   * λ8 = z1 * z2\n   * λ9 = λ3^2\n   * λ10 = λ3 * λ9\n   * λ11 = λ8 * λ6^2 − λ7 * λ9\n   * x3 = λ3 * λ11\n   * y3 = λ6 * (λ9 * λ1 − λ11) − λ4 * λ10\n   * z3 = λ10 * λ8\n   */\n\n\n  ECPointFp.prototype.add = function (b) {\n    if (this.isInfinity()) return b;\n    if (b.isInfinity()) return this;\n    var x1 = this.x.toBigInteger();\n    var y1 = this.y.toBigInteger();\n    var z1 = this.z;\n    var x2 = b.x.toBigInteger();\n    var y2 = b.y.toBigInteger();\n    var z2 = b.z;\n    var q = this.curve.q;\n    var w1 = x1.multiply(z2).mod(q);\n    var w2 = x2.multiply(z1).mod(q);\n    var w3 = w1.subtract(w2);\n    var w4 = y1.multiply(z2).mod(q);\n    var w5 = y2.multiply(z1).mod(q);\n    var w6 = w4.subtract(w5);\n\n    if (BigInteger.ZERO.equals(w3)) {\n      if (BigInteger.ZERO.equals(w6)) {\n        return this.twice(); // this == b，计算自加\n      }\n\n      return this.curve.infinity; // this == -b，则返回无穷远点\n    }\n\n    var w7 = w1.add(w2);\n    var w8 = z1.multiply(z2).mod(q);\n    var w9 = w3.square().mod(q);\n    var w10 = w3.multiply(w9).mod(q);\n    var w11 = w8.multiply(w6.square()).subtract(w7.multiply(w9)).mod(q);\n    var x3 = w3.multiply(w11).mod(q);\n    var y3 = w6.multiply(w9.multiply(w1).subtract(w11)).subtract(w4.multiply(w10)).mod(q);\n    var z3 = w10.multiply(w8).mod(q);\n    return new ECPointFp(this.curve, this.curve.fromBigInteger(x3), this.curve.fromBigInteger(y3), z3);\n  };\n  /**\n   * 自加\n   *\n   * 标准射影坐标系：\n   *\n   * λ1 = 3 * x1^2 + a * z1^2\n   * λ2 = 2 * y1 * z1\n   * λ3 = y1^2\n   * λ4 = λ3 * x1 * z1\n   * λ5 = λ2^2\n   * λ6 = λ1^2 − 8 * λ4\n   * x3 = λ2 * λ6\n   * y3 = λ1 * (4 * λ4 − λ6) − 2 * λ5 * λ3\n   * z3 = λ2 * λ5\n   */\n\n\n  ECPointFp.prototype.twice = function () {\n    if (this.isInfinity()) return this;\n    if (!this.y.toBigInteger().signum()) return this.curve.infinity;\n    var x1 = this.x.toBigInteger();\n    var y1 = this.y.toBigInteger();\n    var z1 = this.z;\n    var q = this.curve.q;\n    var a = this.curve.a.toBigInteger();\n    var w1 = x1.square().multiply(THREE).add(a.multiply(z1.square())).mod(q);\n    var w2 = y1.shiftLeft(1).multiply(z1).mod(q);\n    var w3 = y1.square().mod(q);\n    var w4 = w3.multiply(x1).multiply(z1).mod(q);\n    var w5 = w2.square().mod(q);\n    var w6 = w1.square().subtract(w4.shiftLeft(3)).mod(q);\n    var x3 = w2.multiply(w6).mod(q);\n    var y3 = w1.multiply(w4.shiftLeft(2).subtract(w6)).subtract(w5.shiftLeft(1).multiply(w3)).mod(q);\n    var z3 = w2.multiply(w5).mod(q);\n    return new ECPointFp(this.curve, this.curve.fromBigInteger(x3), this.curve.fromBigInteger(y3), z3);\n  };\n  /**\n   * 倍点计算\n   */\n\n\n  ECPointFp.prototype.multiply = function (k) {\n    if (this.isInfinity()) return this;\n    if (!k.signum()) return this.curve.infinity; // 使用加减法\n\n    var k3 = k.multiply(THREE);\n    var neg = this.negate();\n    var Q = this;\n\n    for (var i = k3.bitLength() - 2; i > 0; i--) {\n      Q = Q.twice();\n      var k3Bit = k3.testBit(i);\n      var kBit = k.testBit(i);\n\n      if (k3Bit !== kBit) {\n        Q = Q.add(k3Bit ? this : neg);\n      }\n    }\n\n    return Q;\n  };\n\n  return ECPointFp;\n}();\n/**\n * 椭圆曲线 y^2 = x^3 + ax + b\n */\n\n\nvar ECCurveFp = function () {\n  function ECCurveFp(q, a, b) {\n    this.q = q;\n    this.a = this.fromBigInteger(a);\n    this.b = this.fromBigInteger(b);\n    this.infinity = new ECPointFp(this, null, null); // 无穷远点\n  }\n  /**\n   * 判断两个椭圆曲线是否相等\n   */\n\n\n  ECCurveFp.prototype.equals = function (other) {\n    if (other === this) return true;\n    return this.q.equals(other.q) && this.a.equals(other.a) && this.b.equals(other.b);\n  };\n  /**\n   * 生成椭圆曲线域元素\n   */\n\n\n  ECCurveFp.prototype.fromBigInteger = function (x) {\n    return new ECFieldElementFp(this.q, x);\n  };\n  /**\n   * 解析 16 进制串为椭圆曲线点\n   */\n\n\n  ECCurveFp.prototype.decodePointHex = function (s) {\n    switch (parseInt(s.substr(0, 2), 16)) {\n      // 第一个字节\n      case 0:\n        return this.infinity;\n\n      case 2:\n      case 3:\n        // 不支持的压缩方式\n        return null;\n\n      case 4:\n      case 6:\n      case 7:\n        var len = (s.length - 2) / 2;\n        var xHex = s.substr(2, len);\n        var yHex = s.substr(len + 2, len);\n        return new ECPointFp(this, this.fromBigInteger(new BigInteger(xHex, 16)), this.fromBigInteger(new BigInteger(yHex, 16)));\n\n      default:\n        // 不支持\n        return null;\n    }\n  };\n\n  return ECCurveFp;\n}();\n\nexport { ECPointFp, ECCurveFp };","map":{"version":3,"sources":["../../../../../src/lib/sm-crypto/sm2/ec.js"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/* eslint-disable no-case-declarations, max-len */\nimport { BigInteger } from 'jsbn';\n/**\n * thanks for Tom Wu : http://www-cs-students.stanford.edu/~tjw/jsbn/\n *\n * Basic Javascript Elliptic Curve implementation\n * Ported loosely from BouncyCastle's Java EC code\n * Only Fp curves implemented for now\n */\nvar THREE = new BigInteger('3');\n/**\n * 椭圆曲线域元素\n */\nvar ECFieldElementFp = /** @class */ (function () {\n    function ECFieldElementFp(q, x) {\n        this.x = x;\n        this.q = q;\n        // TODO if (x.compareTo(q) >= 0) error\n    }\n    /**\n     * 判断相等\n     */\n    ECFieldElementFp.prototype.equals = function (other) {\n        if (other === this)\n            return true;\n        return (this.q.equals(other.q) && this.x.equals(other.x));\n    };\n    /**\n     * 返回具体数值\n     */\n    ECFieldElementFp.prototype.toBigInteger = function () {\n        return this.x;\n    };\n    /**\n     * 取反\n     */\n    ECFieldElementFp.prototype.negate = function () {\n        return new ECFieldElementFp(this.q, this.x.negate().mod(this.q));\n    };\n    /**\n     * 相加\n     */\n    ECFieldElementFp.prototype.add = function (b) {\n        return new ECFieldElementFp(this.q, this.x.add(b.toBigInteger()).mod(this.q));\n    };\n    /**\n     * 相减\n     */\n    ECFieldElementFp.prototype.subtract = function (b) {\n        return new ECFieldElementFp(this.q, this.x.subtract(b.toBigInteger()).mod(this.q));\n    };\n    /**\n     * 相乘\n     */\n    ECFieldElementFp.prototype.multiply = function (b) {\n        return new ECFieldElementFp(this.q, this.x.multiply(b.toBigInteger()).mod(this.q));\n    };\n    /**\n     * 相除\n     */\n    ECFieldElementFp.prototype.divide = function (b) {\n        return new ECFieldElementFp(this.q, this.x.multiply(b.toBigInteger().modInverse(this.q)).mod(this.q));\n    };\n    /**\n     * 平方\n     */\n    ECFieldElementFp.prototype.square = function () {\n        return new ECFieldElementFp(this.q, this.x.square().mod(this.q));\n    };\n    return ECFieldElementFp;\n}());\nvar ECPointFp = /** @class */ (function () {\n    function ECPointFp(curve, x, y, z) {\n        this.curve = curve;\n        this.x = x;\n        this.y = y;\n        // 标准射影坐标系：zinv == null 或 z * zinv == 1\n        this.z = z == null ? BigInteger.ONE : z;\n        this.zinv = null;\n        // TODO: compression flag\n    }\n    ECPointFp.prototype.getX = function () {\n        if (this.zinv === null)\n            this.zinv = this.z.modInverse(this.curve.q);\n        return this.curve.fromBigInteger(this.x.toBigInteger().multiply(this.zinv).mod(this.curve.q));\n    };\n    ECPointFp.prototype.getY = function () {\n        if (this.zinv === null)\n            this.zinv = this.z.modInverse(this.curve.q);\n        return this.curve.fromBigInteger(this.y.toBigInteger().multiply(this.zinv).mod(this.curve.q));\n    };\n    /**\n     * 判断相等\n     */\n    ECPointFp.prototype.equals = function (other) {\n        if (other === this)\n            return true;\n        if (this.isInfinity())\n            return other.isInfinity();\n        if (other.isInfinity())\n            return this.isInfinity();\n        // u = y2 * z1 - y1 * z2\n        var u = other.y.toBigInteger().multiply(this.z).subtract(this.y.toBigInteger().multiply(other.z)).mod(this.curve.q);\n        if (!u.equals(BigInteger.ZERO))\n            return false;\n        // v = x2 * z1 - x1 * z2\n        var v = other.x.toBigInteger().multiply(this.z).subtract(this.x.toBigInteger().multiply(other.z)).mod(this.curve.q);\n        return v.equals(BigInteger.ZERO);\n    };\n    /**\n     * 是否是无穷远点\n     */\n    ECPointFp.prototype.isInfinity = function () {\n        if ((this.x === null) && (this.y === null))\n            return true;\n        return this.z.equals(BigInteger.ZERO) && !this.y.toBigInteger().equals(BigInteger.ZERO);\n    };\n    /**\n     * 取反，x 轴对称点\n     */\n    ECPointFp.prototype.negate = function () {\n        return new ECPointFp(this.curve, this.x, this.y.negate(), this.z);\n    };\n    /**\n     * 相加\n     *\n     * 标准射影坐标系：\n     *\n     * λ1 = x1 * z2\n     * λ2 = x2 * z1\n     * λ3 = λ1 − λ2\n     * λ4 = y1 * z2\n     * λ5 = y2 * z1\n     * λ6 = λ4 − λ5\n     * λ7 = λ1 + λ2\n     * λ8 = z1 * z2\n     * λ9 = λ3^2\n     * λ10 = λ3 * λ9\n     * λ11 = λ8 * λ6^2 − λ7 * λ9\n     * x3 = λ3 * λ11\n     * y3 = λ6 * (λ9 * λ1 − λ11) − λ4 * λ10\n     * z3 = λ10 * λ8\n     */\n    ECPointFp.prototype.add = function (b) {\n        if (this.isInfinity())\n            return b;\n        if (b.isInfinity())\n            return this;\n        var x1 = this.x.toBigInteger();\n        var y1 = this.y.toBigInteger();\n        var z1 = this.z;\n        var x2 = b.x.toBigInteger();\n        var y2 = b.y.toBigInteger();\n        var z2 = b.z;\n        var q = this.curve.q;\n        var w1 = x1.multiply(z2).mod(q);\n        var w2 = x2.multiply(z1).mod(q);\n        var w3 = w1.subtract(w2);\n        var w4 = y1.multiply(z2).mod(q);\n        var w5 = y2.multiply(z1).mod(q);\n        var w6 = w4.subtract(w5);\n        if (BigInteger.ZERO.equals(w3)) {\n            if (BigInteger.ZERO.equals(w6)) {\n                return this.twice(); // this == b，计算自加\n            }\n            return this.curve.infinity; // this == -b，则返回无穷远点\n        }\n        var w7 = w1.add(w2);\n        var w8 = z1.multiply(z2).mod(q);\n        var w9 = w3.square().mod(q);\n        var w10 = w3.multiply(w9).mod(q);\n        var w11 = w8.multiply(w6.square()).subtract(w7.multiply(w9)).mod(q);\n        var x3 = w3.multiply(w11).mod(q);\n        var y3 = w6.multiply(w9.multiply(w1).subtract(w11)).subtract(w4.multiply(w10)).mod(q);\n        var z3 = w10.multiply(w8).mod(q);\n        return new ECPointFp(this.curve, this.curve.fromBigInteger(x3), this.curve.fromBigInteger(y3), z3);\n    };\n    /**\n     * 自加\n     *\n     * 标准射影坐标系：\n     *\n     * λ1 = 3 * x1^2 + a * z1^2\n     * λ2 = 2 * y1 * z1\n     * λ3 = y1^2\n     * λ4 = λ3 * x1 * z1\n     * λ5 = λ2^2\n     * λ6 = λ1^2 − 8 * λ4\n     * x3 = λ2 * λ6\n     * y3 = λ1 * (4 * λ4 − λ6) − 2 * λ5 * λ3\n     * z3 = λ2 * λ5\n     */\n    ECPointFp.prototype.twice = function () {\n        if (this.isInfinity())\n            return this;\n        if (!this.y.toBigInteger().signum())\n            return this.curve.infinity;\n        var x1 = this.x.toBigInteger();\n        var y1 = this.y.toBigInteger();\n        var z1 = this.z;\n        var q = this.curve.q;\n        var a = this.curve.a.toBigInteger();\n        var w1 = x1.square().multiply(THREE).add(a.multiply(z1.square())).mod(q);\n        var w2 = y1.shiftLeft(1).multiply(z1).mod(q);\n        var w3 = y1.square().mod(q);\n        var w4 = w3.multiply(x1).multiply(z1).mod(q);\n        var w5 = w2.square().mod(q);\n        var w6 = w1.square().subtract(w4.shiftLeft(3)).mod(q);\n        var x3 = w2.multiply(w6).mod(q);\n        var y3 = w1.multiply(w4.shiftLeft(2).subtract(w6)).subtract(w5.shiftLeft(1).multiply(w3)).mod(q);\n        var z3 = w2.multiply(w5).mod(q);\n        return new ECPointFp(this.curve, this.curve.fromBigInteger(x3), this.curve.fromBigInteger(y3), z3);\n    };\n    /**\n     * 倍点计算\n     */\n    ECPointFp.prototype.multiply = function (k) {\n        if (this.isInfinity())\n            return this;\n        if (!k.signum())\n            return this.curve.infinity;\n        // 使用加减法\n        var k3 = k.multiply(THREE);\n        var neg = this.negate();\n        var Q = this;\n        for (var i = k3.bitLength() - 2; i > 0; i--) {\n            Q = Q.twice();\n            var k3Bit = k3.testBit(i);\n            var kBit = k.testBit(i);\n            if (k3Bit !== kBit) {\n                Q = Q.add(k3Bit ? this : neg);\n            }\n        }\n        return Q;\n    };\n    return ECPointFp;\n}());\n/**\n * 椭圆曲线 y^2 = x^3 + ax + b\n */\nvar ECCurveFp = /** @class */ (function () {\n    function ECCurveFp(q, a, b) {\n        this.q = q;\n        this.a = this.fromBigInteger(a);\n        this.b = this.fromBigInteger(b);\n        this.infinity = new ECPointFp(this, null, null); // 无穷远点\n    }\n    /**\n     * 判断两个椭圆曲线是否相等\n     */\n    ECCurveFp.prototype.equals = function (other) {\n        if (other === this)\n            return true;\n        return (this.q.equals(other.q) && this.a.equals(other.a) && this.b.equals(other.b));\n    };\n    /**\n     * 生成椭圆曲线域元素\n     */\n    ECCurveFp.prototype.fromBigInteger = function (x) {\n        return new ECFieldElementFp(this.q, x);\n    };\n    /**\n     * 解析 16 进制串为椭圆曲线点\n     */\n    ECCurveFp.prototype.decodePointHex = function (s) {\n        switch (parseInt(s.substr(0, 2), 16)) {\n            // 第一个字节\n            case 0:\n                return this.infinity;\n            case 2:\n            case 3:\n                // 不支持的压缩方式\n                return null;\n            case 4:\n            case 6:\n            case 7:\n                var len = (s.length - 2) / 2;\n                var xHex = s.substr(2, len);\n                var yHex = s.substr(len + 2, len);\n                return new ECPointFp(this, this.fromBigInteger(new BigInteger(xHex, 16)), this.fromBigInteger(new BigInteger(yHex, 16)));\n            default:\n                // 不支持\n                return null;\n        }\n    };\n    return ECCurveFp;\n}());\nexport { ECPointFp, ECCurveFp, };\n//# sourceMappingURL=ec.js.map"]},"metadata":{},"sourceType":"module"}