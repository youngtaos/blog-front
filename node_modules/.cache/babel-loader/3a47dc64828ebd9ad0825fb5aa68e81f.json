{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function () {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n\n        case 7:\n          op = _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n\n            _.ops.push(op);\n\n            break;\n          }\n\n          if (t[2]) _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n      }\n\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nimport { addUserToGroup, createGroup, deleteGroups, getGroups, group, groupWithUsers, groupWithUsersWithCustomData, listGroupAuthorizedResources, removeUserFromGroup, updateGroup } from '../graphqlapi';\nimport { convertUdvToKeyValuePair, formatAuthorizedResources } from '../utils';\n/**\n * @class GroupsManagementClient 管理分组\n * @description 此模块用于管理 Authing 分组，可以进行分组的增删改查、分组添加/删除用户、分组添加/删除策略 等操作。\n *\n * @example\n *\n * 请使用以下方式使用该模块，而不要直接初始化该模块：\n * \\`\\`\\`javascript\n * import { ManagementClient } from \"authing-js-sdk\"\n * const managementClient = new ManagementClient({\n *    userPoolId: \"YOUR_USERPOOL_ID\",\n *    secret: \"YOUR_USERPOOL_SECRET\",\n * })\n * managementClient.groups.list // 获取分组列表\n * managementClient.groups.create // 创建分组\n * managementClient.groups.listUsers // 获取分组用户列表\n * \\`\\`\\`\n *\n * @name GroupsManagementClient\n */\n\nvar GroupsManagementClient = function () {\n  function GroupsManagementClient(options, graphqlClient, tokenProvider) {\n    this.options = options;\n    this.graphqlClient = graphqlClient;\n    this.tokenProvider = tokenProvider;\n  }\n  /**\n   * @name create\n   * @name_zh 创建分组\n   * @description 创建分组\n   *\n   * @param {string} code 分组唯一标志符\n   * @param {string} name 分组名称\n   * @param {string} [description] 描述\n   *\n   * @example\n   * managementClient.groups.create('group', '分组 xxx')\n   *\n   * @returns {Promise<DeepPartial<Group>>}\n   * @memberof GroupsManagementClient\n   */\n\n\n  GroupsManagementClient.prototype.create = function (code, name, description) {\n    return __awaiter(this, void 0, void 0, function () {\n      var res;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , createGroup(this.graphqlClient, this.tokenProvider, {\n              code: code,\n              name: name,\n              description: description\n            })];\n\n          case 1:\n            res = _a.sent();\n            return [2\n            /*return*/\n            , res.createGroup];\n        }\n      });\n    });\n  };\n  /**\n   * @name delete\n   * @name_zh 删除分组\n   * @description 删除分组\n   *\n   * @param {string} code 分组唯一标志符\n   *\n   * @example\n   * managementClient.groups.delete('rolea')\n   *\n   * @returns {Promise<CommonMessage>}\n   * @memberof GroupsManagementClient\n   */\n\n\n  GroupsManagementClient.prototype.delete = function (code) {\n    return __awaiter(this, void 0, void 0, function () {\n      var data;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , deleteGroups(this.graphqlClient, this.tokenProvider, {\n              codeList: [code]\n            })];\n\n          case 1:\n            data = _a.sent().deleteGroups;\n            return [2\n            /*return*/\n            , data];\n        }\n      });\n    });\n  };\n  /**\n   * @name update\n   * @name_zh 修改分组\n   * @description 修改分组\n   *\n   * @param {string} code 分组唯一标志符\n   * @param {Object} input\n   * @param {string} [input.name] 新的名称\n   * @param {string} [input.description] 新的描述信息\n   * @param {string} [input.newCode] 新的唯一标志符\n   *\n   * @example\n   * managementClient.groups.update('group', {newCode: 'newcode'})\n   *\n   *\n   * @returns {Promise<DeepPartial<Group>>}\n   * @memberof GroupsManagementClient\n   */\n\n\n  GroupsManagementClient.prototype.update = function (code, input) {\n    return __awaiter(this, void 0, void 0, function () {\n      var description, newCode, name, data;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            description = input.description, newCode = input.newCode, name = input.name;\n            return [4\n            /*yield*/\n            , updateGroup(this.graphqlClient, this.tokenProvider, {\n              code: code,\n              name: name,\n              description: description,\n              newCode: newCode\n            })];\n\n          case 1:\n            data = _a.sent().updateGroup;\n            return [2\n            /*return*/\n            , data];\n        }\n      });\n    });\n  };\n  /**\n   * @name detail\n   * @name_zh 获取分组详情\n   * @description 获取分组详情\n   *\n   * @param {string} code 分组唯一标志符\n   *\n   * @example\n   * managementClient.groups.detail('manager')\n   *\n   * @returns {Promise<DeepPartial<Group>>} 分组详情\n   * @memberof GroupsManagementClient\n   */\n\n\n  GroupsManagementClient.prototype.detail = function (code) {\n    return __awaiter(this, void 0, void 0, function () {\n      var data;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , group(this.graphqlClient, this.tokenProvider, {\n              code: code\n            })];\n\n          case 1:\n            data = _a.sent().group;\n            return [2\n            /*return*/\n            , data];\n        }\n      });\n    });\n  };\n  /**\n   * @name list\n   * @name_zh 获取分组列表\n   * @description 获取分组列表\n   *\n   * @param {number} [page=1] 页码数\n   * @param {number} [limit=10] 每页个数\n   *\n   * @example\n   *\n   * managementClient.groups.list(1, 10)\n   *\n   * @returns {Promise<DeepPartial<PaginatedGroups>>}\n   * @memberof GroupsManagementClient\n   */\n\n\n  GroupsManagementClient.prototype.list = function (page, limit) {\n    if (page === void 0) {\n      page = 1;\n    }\n\n    if (limit === void 0) {\n      limit = 10;\n    }\n\n    return __awaiter(this, void 0, void 0, function () {\n      var data;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , getGroups(this.graphqlClient, this.tokenProvider, {\n              page: page,\n              limit: limit\n            })];\n\n          case 1:\n            data = _a.sent().groups;\n            return [2\n            /*return*/\n            , data];\n        }\n      });\n    });\n  };\n  /**\n   * @name deleteMany\n   * @name_zh 批量删除分组\n   * @description 批量删除分组\n   *\n   * @param {string[]} codeList 分组唯一标志符列表\n   *\n   * @example\n   * managementClient.groups.deleteMany(['groupa', 'groupb'])\n   *\n   * @returns {Promise<CommonMessage>}\n   * @memberof GroupsManagementClient\n   */\n\n\n  GroupsManagementClient.prototype.deleteMany = function (codeList) {\n    return __awaiter(this, void 0, void 0, function () {\n      var data;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , deleteGroups(this.graphqlClient, this.tokenProvider, {\n              codeList: codeList\n            })];\n\n          case 1:\n            data = _a.sent().deleteGroups;\n            return [2\n            /*return*/\n            , data];\n        }\n      });\n    });\n  };\n  /**\n   * @name listUsers\n   * @name_zh 获取分组用户列表\n   * @description 获取分组用户列表\n   * @param {string} code 分组唯一标志符\n   * @param {number} [page=1] 页码数\n   * @param {number} [limit=10] 每页个数\n   *\n   * @example\n   *\n   * managementClient.groups.listUsers(code)\n   *\n   * @returns {Promise<DeepPartial<PaginatedUsers>>}\n   * @memberof GroupsManagementClient\n   */\n\n\n  GroupsManagementClient.prototype.listUsers = function (code, options) {\n    return __awaiter(this, void 0, void 0, function () {\n      var _a, _b, withCustomData, _c, page, _d, limit, data, data, _e, totalCount, list;\n\n      return __generator(this, function (_f) {\n        switch (_f.label) {\n          case 0:\n            _a = options || {}, _b = _a.withCustomData, withCustomData = _b === void 0 ? false : _b, _c = _a.page, page = _c === void 0 ? 1 : _c, _d = _a.limit, limit = _d === void 0 ? 10 : _d;\n            if (!!withCustomData) return [3\n            /*break*/\n            , 2];\n            return [4\n            /*yield*/\n            , groupWithUsers(this.graphqlClient, this.tokenProvider, {\n              code: code,\n              page: page,\n              limit: limit\n            })];\n\n          case 1:\n            data = _f.sent().group;\n            return [2\n            /*return*/\n            , data.users];\n\n          case 2:\n            return [4\n            /*yield*/\n            , groupWithUsersWithCustomData(this.graphqlClient, this.tokenProvider, {\n              code: code,\n              page: page,\n              limit: limit\n            })];\n\n          case 3:\n            data = _f.sent().group;\n            _e = data.users, totalCount = _e.totalCount, list = _e.list;\n            list = list.map(function (user) {\n              // @ts-ignore\n              user.customData = convertUdvToKeyValuePair(user.customData);\n              return user;\n            });\n            return [2\n            /*return*/\n            , {\n              totalCount: totalCount,\n              // @ts-ignore\n              list: list\n            }];\n        }\n      });\n    });\n  };\n  /**\n   * @name addUsers\n   * @name_zh 添加用户\n   * @description 添加用户\n   *\n   * @param {string} code 分组唯一标志符\n   * @param {string[]} userIds 用户 ID 列表\n   *\n   * @example\n   * managementClient.groups.addUsers(code, ['USERID1', 'USERID2'])\n   *\n   * @returns {Promise<CommonMessage>}\n   * @memberof GroupsManagementClient\n   */\n\n\n  GroupsManagementClient.prototype.addUsers = function (code, userIds) {\n    return __awaiter(this, void 0, void 0, function () {\n      var res;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , addUserToGroup(this.graphqlClient, this.tokenProvider, {\n              code: code,\n              userIds: userIds\n            })];\n\n          case 1:\n            res = _a.sent();\n            return [2\n            /*return*/\n            , res.addUserToGroup];\n        }\n      });\n    });\n  };\n  /**\n   * @name removeUsers\n   * @name_zh 移除用户\n   *\n   * @description 移除用户\n   *\n   * @param {string} code 分组唯一标志符\n   * @param {string[]} userIds 用户 ID 列表\n   * @example\n   * managementClient.groups.removeUsers(code, ['USERID1', 'USERID2'])\n   *\n   * @returns {Promise<CommonMessage>}\n   * @memberof GroupsManagementClient\n   */\n\n\n  GroupsManagementClient.prototype.removeUsers = function (code, userIds) {\n    return __awaiter(this, void 0, void 0, function () {\n      var res;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , removeUserFromGroup(this.graphqlClient, this.tokenProvider, {\n              code: code,\n              userIds: userIds\n            })];\n\n          case 1:\n            res = _a.sent();\n            return [2\n            /*return*/\n            , res.removeUserFromGroup];\n        }\n      });\n    });\n  };\n  /**\n   * @description 获取分组被授权的所有资源\n   *\n   * @param code: 分组 code\n   * @param namespace: 权限组 namespace code\n   * @param options.resourceType 资源类型\n   */\n\n\n  GroupsManagementClient.prototype.listAuthorizedResources = function (code, namespace, options) {\n    return __awaiter(this, void 0, void 0, function () {\n      var resourceType, group, _a, list, totalCount;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            resourceType = (options || {}).resourceType;\n            return [4\n            /*yield*/\n            , listGroupAuthorizedResources(this.graphqlClient, this.tokenProvider, {\n              code: code,\n              namespace: namespace,\n              resourceType: resourceType\n            })];\n\n          case 1:\n            group = _b.sent().group;\n\n            if (!group) {\n              throw new Error('分组不存在');\n            }\n\n            _a = group.authorizedResources, list = _a.list, totalCount = _a.totalCount;\n            list = formatAuthorizedResources(list);\n            return [2\n            /*return*/\n            , {\n              list: list,\n              totalCount: totalCount\n            }];\n        }\n      });\n    });\n  };\n\n  return GroupsManagementClient;\n}();\n\nexport { GroupsManagementClient };","map":{"version":3,"sources":["../../../../src/lib/management/GroupsManagementClient.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nimport { addUserToGroup, createGroup, deleteGroups, getGroups, group, groupWithUsers, groupWithUsersWithCustomData, listGroupAuthorizedResources, removeUserFromGroup, updateGroup } from '../graphqlapi';\nimport { convertUdvToKeyValuePair, formatAuthorizedResources } from '../utils';\n/**\n * @class GroupsManagementClient 管理分组\n * @description 此模块用于管理 Authing 分组，可以进行分组的增删改查、分组添加/删除用户、分组添加/删除策略 等操作。\n *\n * @example\n *\n * 请使用以下方式使用该模块，而不要直接初始化该模块：\n * \\`\\`\\`javascript\n * import { ManagementClient } from \"authing-js-sdk\"\n * const managementClient = new ManagementClient({\n *    userPoolId: \"YOUR_USERPOOL_ID\",\n *    secret: \"YOUR_USERPOOL_SECRET\",\n * })\n * managementClient.groups.list // 获取分组列表\n * managementClient.groups.create // 创建分组\n * managementClient.groups.listUsers // 获取分组用户列表\n * \\`\\`\\`\n *\n * @name GroupsManagementClient\n */\nvar GroupsManagementClient = /** @class */ (function () {\n    function GroupsManagementClient(options, graphqlClient, tokenProvider) {\n        this.options = options;\n        this.graphqlClient = graphqlClient;\n        this.tokenProvider = tokenProvider;\n    }\n    /**\n     * @name create\n     * @name_zh 创建分组\n     * @description 创建分组\n     *\n     * @param {string} code 分组唯一标志符\n     * @param {string} name 分组名称\n     * @param {string} [description] 描述\n     *\n     * @example\n     * managementClient.groups.create('group', '分组 xxx')\n     *\n     * @returns {Promise<DeepPartial<Group>>}\n     * @memberof GroupsManagementClient\n     */\n    GroupsManagementClient.prototype.create = function (code, name, description) {\n        return __awaiter(this, void 0, void 0, function () {\n            var res;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, createGroup(this.graphqlClient, this.tokenProvider, {\n                            code: code,\n                            name: name,\n                            description: description\n                        })];\n                    case 1:\n                        res = _a.sent();\n                        return [2 /*return*/, res.createGroup];\n                }\n            });\n        });\n    };\n    /**\n     * @name delete\n     * @name_zh 删除分组\n     * @description 删除分组\n     *\n     * @param {string} code 分组唯一标志符\n     *\n     * @example\n     * managementClient.groups.delete('rolea')\n     *\n     * @returns {Promise<CommonMessage>}\n     * @memberof GroupsManagementClient\n     */\n    GroupsManagementClient.prototype.delete = function (code) {\n        return __awaiter(this, void 0, void 0, function () {\n            var data;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, deleteGroups(this.graphqlClient, this.tokenProvider, {\n                            codeList: [code]\n                        })];\n                    case 1:\n                        data = (_a.sent()).deleteGroups;\n                        return [2 /*return*/, data];\n                }\n            });\n        });\n    };\n    /**\n     * @name update\n     * @name_zh 修改分组\n     * @description 修改分组\n     *\n     * @param {string} code 分组唯一标志符\n     * @param {Object} input\n     * @param {string} [input.name] 新的名称\n     * @param {string} [input.description] 新的描述信息\n     * @param {string} [input.newCode] 新的唯一标志符\n     *\n     * @example\n     * managementClient.groups.update('group', {newCode: 'newcode'})\n     *\n     *\n     * @returns {Promise<DeepPartial<Group>>}\n     * @memberof GroupsManagementClient\n     */\n    GroupsManagementClient.prototype.update = function (code, input) {\n        return __awaiter(this, void 0, void 0, function () {\n            var description, newCode, name, data;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        description = input.description, newCode = input.newCode, name = input.name;\n                        return [4 /*yield*/, updateGroup(this.graphqlClient, this.tokenProvider, {\n                                code: code,\n                                name: name,\n                                description: description,\n                                newCode: newCode\n                            })];\n                    case 1:\n                        data = (_a.sent()).updateGroup;\n                        return [2 /*return*/, data];\n                }\n            });\n        });\n    };\n    /**\n     * @name detail\n     * @name_zh 获取分组详情\n     * @description 获取分组详情\n     *\n     * @param {string} code 分组唯一标志符\n     *\n     * @example\n     * managementClient.groups.detail('manager')\n     *\n     * @returns {Promise<DeepPartial<Group>>} 分组详情\n     * @memberof GroupsManagementClient\n     */\n    GroupsManagementClient.prototype.detail = function (code) {\n        return __awaiter(this, void 0, void 0, function () {\n            var data;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, group(this.graphqlClient, this.tokenProvider, {\n                            code: code\n                        })];\n                    case 1:\n                        data = (_a.sent()).group;\n                        return [2 /*return*/, data];\n                }\n            });\n        });\n    };\n    /**\n     * @name list\n     * @name_zh 获取分组列表\n     * @description 获取分组列表\n     *\n     * @param {number} [page=1] 页码数\n     * @param {number} [limit=10] 每页个数\n     *\n     * @example\n     *\n     * managementClient.groups.list(1, 10)\n     *\n     * @returns {Promise<DeepPartial<PaginatedGroups>>}\n     * @memberof GroupsManagementClient\n     */\n    GroupsManagementClient.prototype.list = function (page, limit) {\n        if (page === void 0) { page = 1; }\n        if (limit === void 0) { limit = 10; }\n        return __awaiter(this, void 0, void 0, function () {\n            var data;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, getGroups(this.graphqlClient, this.tokenProvider, {\n                            page: page,\n                            limit: limit\n                        })];\n                    case 1:\n                        data = (_a.sent()).groups;\n                        return [2 /*return*/, data];\n                }\n            });\n        });\n    };\n    /**\n     * @name deleteMany\n     * @name_zh 批量删除分组\n     * @description 批量删除分组\n     *\n     * @param {string[]} codeList 分组唯一标志符列表\n     *\n     * @example\n     * managementClient.groups.deleteMany(['groupa', 'groupb'])\n     *\n     * @returns {Promise<CommonMessage>}\n     * @memberof GroupsManagementClient\n     */\n    GroupsManagementClient.prototype.deleteMany = function (codeList) {\n        return __awaiter(this, void 0, void 0, function () {\n            var data;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, deleteGroups(this.graphqlClient, this.tokenProvider, {\n                            codeList: codeList\n                        })];\n                    case 1:\n                        data = (_a.sent()).deleteGroups;\n                        return [2 /*return*/, data];\n                }\n            });\n        });\n    };\n    /**\n     * @name listUsers\n     * @name_zh 获取分组用户列表\n     * @description 获取分组用户列表\n     * @param {string} code 分组唯一标志符\n     * @param {number} [page=1] 页码数\n     * @param {number} [limit=10] 每页个数\n     *\n     * @example\n     *\n     * managementClient.groups.listUsers(code)\n     *\n     * @returns {Promise<DeepPartial<PaginatedUsers>>}\n     * @memberof GroupsManagementClient\n     */\n    GroupsManagementClient.prototype.listUsers = function (code, options) {\n        return __awaiter(this, void 0, void 0, function () {\n            var _a, _b, withCustomData, _c, page, _d, limit, data, data, _e, totalCount, list;\n            return __generator(this, function (_f) {\n                switch (_f.label) {\n                    case 0:\n                        _a = options || {}, _b = _a.withCustomData, withCustomData = _b === void 0 ? false : _b, _c = _a.page, page = _c === void 0 ? 1 : _c, _d = _a.limit, limit = _d === void 0 ? 10 : _d;\n                        if (!!withCustomData) return [3 /*break*/, 2];\n                        return [4 /*yield*/, groupWithUsers(this.graphqlClient, this.tokenProvider, {\n                                code: code,\n                                page: page,\n                                limit: limit\n                            })];\n                    case 1:\n                        data = (_f.sent()).group;\n                        return [2 /*return*/, data.users];\n                    case 2: return [4 /*yield*/, groupWithUsersWithCustomData(this.graphqlClient, this.tokenProvider, {\n                            code: code,\n                            page: page,\n                            limit: limit\n                        })];\n                    case 3:\n                        data = (_f.sent()).group;\n                        _e = data.users, totalCount = _e.totalCount, list = _e.list;\n                        list = list.map(function (user) {\n                            // @ts-ignore\n                            user.customData = convertUdvToKeyValuePair(user.customData);\n                            return user;\n                        });\n                        return [2 /*return*/, {\n                                totalCount: totalCount,\n                                // @ts-ignore\n                                list: list\n                            }];\n                }\n            });\n        });\n    };\n    /**\n     * @name addUsers\n     * @name_zh 添加用户\n     * @description 添加用户\n     *\n     * @param {string} code 分组唯一标志符\n     * @param {string[]} userIds 用户 ID 列表\n     *\n     * @example\n     * managementClient.groups.addUsers(code, ['USERID1', 'USERID2'])\n     *\n     * @returns {Promise<CommonMessage>}\n     * @memberof GroupsManagementClient\n     */\n    GroupsManagementClient.prototype.addUsers = function (code, userIds) {\n        return __awaiter(this, void 0, void 0, function () {\n            var res;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, addUserToGroup(this.graphqlClient, this.tokenProvider, {\n                            code: code,\n                            userIds: userIds\n                        })];\n                    case 1:\n                        res = _a.sent();\n                        return [2 /*return*/, res.addUserToGroup];\n                }\n            });\n        });\n    };\n    /**\n     * @name removeUsers\n     * @name_zh 移除用户\n     *\n     * @description 移除用户\n     *\n     * @param {string} code 分组唯一标志符\n     * @param {string[]} userIds 用户 ID 列表\n     * @example\n     * managementClient.groups.removeUsers(code, ['USERID1', 'USERID2'])\n     *\n     * @returns {Promise<CommonMessage>}\n     * @memberof GroupsManagementClient\n     */\n    GroupsManagementClient.prototype.removeUsers = function (code, userIds) {\n        return __awaiter(this, void 0, void 0, function () {\n            var res;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, removeUserFromGroup(this.graphqlClient, this.tokenProvider, {\n                            code: code,\n                            userIds: userIds\n                        })];\n                    case 1:\n                        res = _a.sent();\n                        return [2 /*return*/, res.removeUserFromGroup];\n                }\n            });\n        });\n    };\n    /**\n     * @description 获取分组被授权的所有资源\n     *\n     * @param code: 分组 code\n     * @param namespace: 权限组 namespace code\n     * @param options.resourceType 资源类型\n     */\n    GroupsManagementClient.prototype.listAuthorizedResources = function (code, namespace, options) {\n        return __awaiter(this, void 0, void 0, function () {\n            var resourceType, group, _a, list, totalCount;\n            return __generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        resourceType = (options || {}).resourceType;\n                        return [4 /*yield*/, listGroupAuthorizedResources(this.graphqlClient, this.tokenProvider, {\n                                code: code,\n                                namespace: namespace,\n                                resourceType: resourceType\n                            })];\n                    case 1:\n                        group = (_b.sent()).group;\n                        if (!group) {\n                            throw new Error('分组不存在');\n                        }\n                        _a = group.authorizedResources, list = _a.list, totalCount = _a.totalCount;\n                        list = formatAuthorizedResources(list);\n                        return [2 /*return*/, {\n                                list: list,\n                                totalCount: totalCount\n                            }];\n                }\n            });\n        });\n    };\n    return GroupsManagementClient;\n}());\nexport { GroupsManagementClient };\n//# sourceMappingURL=GroupsManagementClient.js.map"]},"metadata":{},"sourceType":"module"}