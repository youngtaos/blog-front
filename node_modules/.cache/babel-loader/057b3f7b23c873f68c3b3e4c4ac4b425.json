{"ast":null,"code":"/* eslint-disable no-bitwise, no-mixed-operators, no-use-before-define, max-len */\nimport { ECCurveFp } from './ec';\nimport { BigInteger, SecureRandom } from 'jsbn';\nvar rng = new SecureRandom();\n\nvar _a = generateEcparam(),\n    curve = _a.curve,\n    G = _a.G,\n    n = _a.n;\n/**\n * 获取公共椭圆曲线\n */\n\n\nfunction getGlobalCurve() {\n  return curve;\n}\n/**\n * 生成ecparam\n */\n\n\nfunction generateEcparam() {\n  // 椭圆曲线\n  var p = new BigInteger('FFFFFFFEFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00000000FFFFFFFFFFFFFFFF', 16);\n  var a = new BigInteger('FFFFFFFEFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00000000FFFFFFFFFFFFFFFC', 16);\n  var b = new BigInteger('28E9FA9E9D9F5E344D5A9E4BCF6509A7F39789F515AB8F92DDBCBD414D940E93', 16);\n  var curve = new ECCurveFp(p, a, b); // 基点\n\n  var gxHex = '32C4AE2C1F1981195F9904466A39C9948FE30BBFF2660BE1715A4589334C74C7';\n  var gyHex = 'BC3736A2F4F6779C59BDCEE36B692153D0A9877CC62A474002DF32E52139F0A0';\n  var G = curve.decodePointHex('04' + gxHex + gyHex);\n  var n = new BigInteger('FFFFFFFEFFFFFFFFFFFFFFFFFFFFFFFF7203DF6B21C6052B53BBF40939D54123', 16);\n  return {\n    curve: curve,\n    G: G,\n    n: n\n  };\n}\n/**\n * 生成密钥对：publicKey = privateKey * G\n */\n\n\nfunction generateKeyPairHex(a, b, c) {\n  var random = a ? new BigInteger(a, b, c) : new BigInteger(n.bitLength(), rng);\n  var d = random.mod(n.subtract(BigInteger.ONE)).add(BigInteger.ONE); // 随机数\n\n  var privateKey = leftPad(d.toString(16), 64);\n  var P = G.multiply(d); // P = dG，p 为公钥，d 为私钥\n\n  var Px = leftPad(P.getX().toBigInteger().toString(16), 64);\n  var Py = leftPad(P.getY().toBigInteger().toString(16), 64);\n  var publicKey = '04' + Px + Py;\n  return {\n    privateKey: privateKey,\n    publicKey: publicKey\n  };\n}\n/**\n * utf8串转16进制串\n */\n\n\nfunction utf8ToHex(input) {\n  input = unescape(encodeURIComponent(input));\n  var length = input.length; // 转换到字数组\n\n  var words = [];\n\n  for (var i = 0; i < length; i++) {\n    words[i >>> 2] |= (input.charCodeAt(i) & 0xff) << 24 - i % 4 * 8;\n  } // 转换到16进制\n\n\n  var hexChars = [];\n\n  for (var i = 0; i < length; i++) {\n    var bite = words[i >>> 2] >>> 24 - i % 4 * 8 & 0xff;\n    hexChars.push((bite >>> 4).toString(16));\n    hexChars.push((bite & 0x0f).toString(16));\n  }\n\n  return hexChars.join('');\n}\n/**\n * 补全16进制字符串\n */\n\n\nfunction leftPad(input, num) {\n  if (input.length >= num) return input;\n  return new Array(num - input.length + 1).join('0') + input;\n}\n/**\n * 转成16进制串\n */\n\n\nfunction arrayToHex(arr) {\n  return arr.map(function (item) {\n    item = item.toString(16);\n    return item.length === 1 ? '0' + item : item;\n  }).join('');\n}\n/**\n * 转成utf8串\n */\n\n\nfunction arrayToUtf8(arr) {\n  var words = [];\n  var j = 0;\n\n  for (var i = 0; i < arr.length * 2; i += 2) {\n    words[i >>> 3] |= parseInt(arr[j], 10) << 24 - i % 8 * 4;\n    j++;\n  }\n\n  try {\n    var latin1Chars = [];\n\n    for (var i = 0; i < arr.length; i++) {\n      var bite = words[i >>> 2] >>> 24 - i % 4 * 8 & 0xff;\n      latin1Chars.push(String.fromCharCode(bite));\n    }\n\n    return decodeURIComponent(escape(latin1Chars.join('')));\n  } catch (e) {\n    throw new Error('Malformed UTF-8 data');\n  }\n}\n/**\n * 转成字节数组\n */\n\n\nfunction hexToArray(hexStr) {\n  var words = [];\n  var hexStrLength = hexStr.length;\n\n  if (hexStrLength % 2 !== 0) {\n    hexStr = leftPad(hexStr, hexStrLength + 1);\n  }\n\n  hexStrLength = hexStr.length;\n\n  for (var i = 0; i < hexStrLength; i += 2) {\n    words.push(parseInt(hexStr.substr(i, 2), 16));\n  }\n\n  return words;\n}\n/**\n * 验证公钥是否为椭圆曲线上的点\n */\n\n\nfunction verifyPublicKey(publicKey) {\n  var point = curve.decodePointHex(publicKey);\n  if (!point) return false;\n  var x = point.getX();\n  var y = point.getY(); // 验证 y^2 是否等于 x^3 + ax + b\n\n  return y.square().equals(x.multiply(x.square()).add(x.multiply(curve.a)).add(curve.b));\n}\n\nexport { getGlobalCurve, generateEcparam, generateKeyPairHex, utf8ToHex, leftPad, arrayToHex, arrayToUtf8, hexToArray, verifyPublicKey };","map":{"version":3,"sources":["../../../../../src/lib/sm-crypto/sm2/utils.js"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/* eslint-disable no-bitwise, no-mixed-operators, no-use-before-define, max-len */\nimport { ECCurveFp } from './ec';\nimport { BigInteger, SecureRandom } from 'jsbn';\nvar rng = new SecureRandom();\nvar _a = generateEcparam(), curve = _a.curve, G = _a.G, n = _a.n;\n/**\n * 获取公共椭圆曲线\n */\nfunction getGlobalCurve() {\n    return curve;\n}\n/**\n * 生成ecparam\n */\nfunction generateEcparam() {\n    // 椭圆曲线\n    var p = new BigInteger('FFFFFFFEFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00000000FFFFFFFFFFFFFFFF', 16);\n    var a = new BigInteger('FFFFFFFEFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00000000FFFFFFFFFFFFFFFC', 16);\n    var b = new BigInteger('28E9FA9E9D9F5E344D5A9E4BCF6509A7F39789F515AB8F92DDBCBD414D940E93', 16);\n    var curve = new ECCurveFp(p, a, b);\n    // 基点\n    var gxHex = '32C4AE2C1F1981195F9904466A39C9948FE30BBFF2660BE1715A4589334C74C7';\n    var gyHex = 'BC3736A2F4F6779C59BDCEE36B692153D0A9877CC62A474002DF32E52139F0A0';\n    var G = curve.decodePointHex('04' + gxHex + gyHex);\n    var n = new BigInteger('FFFFFFFEFFFFFFFFFFFFFFFFFFFFFFFF7203DF6B21C6052B53BBF40939D54123', 16);\n    return { curve: curve, G: G, n: n };\n}\n/**\n * 生成密钥对：publicKey = privateKey * G\n */\nfunction generateKeyPairHex(a, b, c) {\n    var random = a ? new BigInteger(a, b, c) : new BigInteger(n.bitLength(), rng);\n    var d = random.mod(n.subtract(BigInteger.ONE)).add(BigInteger.ONE); // 随机数\n    var privateKey = leftPad(d.toString(16), 64);\n    var P = G.multiply(d); // P = dG，p 为公钥，d 为私钥\n    var Px = leftPad(P.getX().toBigInteger().toString(16), 64);\n    var Py = leftPad(P.getY().toBigInteger().toString(16), 64);\n    var publicKey = '04' + Px + Py;\n    return { privateKey: privateKey, publicKey: publicKey };\n}\n/**\n * utf8串转16进制串\n */\nfunction utf8ToHex(input) {\n    input = unescape(encodeURIComponent(input));\n    var length = input.length;\n    // 转换到字数组\n    var words = [];\n    for (var i = 0; i < length; i++) {\n        words[i >>> 2] |= (input.charCodeAt(i) & 0xff) << (24 - (i % 4) * 8);\n    }\n    // 转换到16进制\n    var hexChars = [];\n    for (var i = 0; i < length; i++) {\n        var bite = (words[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff;\n        hexChars.push((bite >>> 4).toString(16));\n        hexChars.push((bite & 0x0f).toString(16));\n    }\n    return hexChars.join('');\n}\n/**\n * 补全16进制字符串\n */\nfunction leftPad(input, num) {\n    if (input.length >= num)\n        return input;\n    return (new Array(num - input.length + 1)).join('0') + input;\n}\n/**\n * 转成16进制串\n */\nfunction arrayToHex(arr) {\n    return arr.map(function (item) {\n        item = item.toString(16);\n        return item.length === 1 ? '0' + item : item;\n    }).join('');\n}\n/**\n * 转成utf8串\n */\nfunction arrayToUtf8(arr) {\n    var words = [];\n    var j = 0;\n    for (var i = 0; i < arr.length * 2; i += 2) {\n        words[i >>> 3] |= parseInt(arr[j], 10) << (24 - (i % 8) * 4);\n        j++;\n    }\n    try {\n        var latin1Chars = [];\n        for (var i = 0; i < arr.length; i++) {\n            var bite = (words[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff;\n            latin1Chars.push(String.fromCharCode(bite));\n        }\n        return decodeURIComponent(escape(latin1Chars.join('')));\n    }\n    catch (e) {\n        throw new Error('Malformed UTF-8 data');\n    }\n}\n/**\n * 转成字节数组\n */\nfunction hexToArray(hexStr) {\n    var words = [];\n    var hexStrLength = hexStr.length;\n    if (hexStrLength % 2 !== 0) {\n        hexStr = leftPad(hexStr, hexStrLength + 1);\n    }\n    hexStrLength = hexStr.length;\n    for (var i = 0; i < hexStrLength; i += 2) {\n        words.push(parseInt(hexStr.substr(i, 2), 16));\n    }\n    return words;\n}\n/**\n * 验证公钥是否为椭圆曲线上的点\n */\nfunction verifyPublicKey(publicKey) {\n    var point = curve.decodePointHex(publicKey);\n    if (!point)\n        return false;\n    var x = point.getX();\n    var y = point.getY();\n    // 验证 y^2 是否等于 x^3 + ax + b\n    return y.square().equals(x.multiply(x.square()).add(x.multiply(curve.a)).add(curve.b));\n}\nexport { getGlobalCurve, generateEcparam, generateKeyPairHex, utf8ToHex, leftPad, arrayToHex, arrayToUtf8, hexToArray, verifyPublicKey, };\n//# sourceMappingURL=utils.js.map"]},"metadata":{},"sourceType":"module"}