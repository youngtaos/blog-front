{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function () {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n\n        case 7:\n          op = _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n\n            _.ops.push(op);\n\n            break;\n          }\n\n          if (t[2]) _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n      }\n\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nimport buildTree, { formatAuthorizedResources } from '../utils';\nimport { createOrg, org, deleteOrg, deleteNode, getChildrenNodes, addMember, getMembersById, addNode, updateNode, moveNode, removeMembers, isRootNode, rootNode, nodeById, setMainDepartment, listNodeByIdAuthorizedResources, listNodeByCodeAuthorizedResources, moveMembers, searchNodes, orgs } from '../graphqlapi';\n/**\n * @class OrgManagementClient 管理组织机构\n * @description 一个 Authing 用户池可以创建多个组织机构。此模块用于管理 Authing 组织机构，可以进行组织机构的增删改查、添加删除移动节点、导入组织机构等操作。\n *\n * @example\n *\n * 请使用以下方式使用该模块：\n * \\`\\`\\`javascript\n * import { ManagementClient } from \"authing-js-sdk\"\n * const managementClient = new ManagementClient({\n *    userPoolId: \"YOUR_USERPOOL_ID\",\n *    secret: \"YOUR_USERPOOL_SECRET\",\n * })\n * managementClient.org.list // 获取用户池组织机构列表\n * managementClient.org.moveNode // 获取组织机构详情\n * managementClient.org.listMembers // 获取节点用户列表\n * \\`\\`\\`\n *\n * @name OrgManagementClient\n */\n\nvar OrgManagementClient = function () {\n  function OrgManagementClient(options, graphqlClient, httpClient, tokenProvider) {\n    this.options = options;\n    this.httpClient = httpClient;\n    this.graphqlClient = graphqlClient;\n    this.tokenProvider = tokenProvider;\n  }\n\n  OrgManagementClient.prototype.buildTree = function (org) {\n    org.tree = buildTree(JSON.parse(JSON.stringify(org.nodes)));\n    return org;\n  };\n  /**\n   * @name create\n   * @name_zh 创建组织机构\n   * @description 创建组织机构，会创建一个只有一个节点的组织机构。\n   * 如果你想将一个完整的组织树导入进来，请使用 importByJson 方法。\n   *\n   * @param {string} name 组织机构名称，该名称会作为该组织机构根节点的名称。\n   * @param {string} [description] 根节点描述\n   * @param {string} [code] 根节点唯一标志，必须为合法的英文字符。\n   *\n   * @example\n   *\n   * const org = await managementClient.org.create('北京非凡科技', '北京非凡科技有限公司', 'feifan');\n   *\n   * @memberof OrgManagementClient\n   */\n\n\n  OrgManagementClient.prototype.create = function (name, description, code, tenantId) {\n    return __awaiter(this, void 0, void 0, function () {\n      var org;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , createOrg(this.graphqlClient, this.tokenProvider, {\n              name: name,\n              description: description,\n              code: code,\n              tenantId: tenantId\n            })];\n\n          case 1:\n            org = _a.sent().createOrg;\n            return [2\n            /*return*/\n            , org];\n        }\n      });\n    });\n  };\n  /**\n   * @name deleteById\n   * @name_zh 删除组织机构\n   * @description 删除组织机构树\n   * @param {string} id 组织机构 ID\n   *\n   * @returns {Promise<CommonMessage>}\n   * @memberof OrgManagementClient\n   */\n\n\n  OrgManagementClient.prototype.deleteById = function (id) {\n    return __awaiter(this, void 0, void 0, function () {\n      var res;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , deleteOrg(this.graphqlClient, this.tokenProvider, {\n              id: id\n            })];\n\n          case 1:\n            res = _a.sent();\n            return [2\n            /*return*/\n            , res.deleteOrg];\n        }\n      });\n    });\n  };\n  /**\n   * @deprecated\n   * @name list\n   * @name_zh 获取用户池组织机构列表\n   * @description 获取用户池组织机构列表\n   *\n   * @param {number} [page=1]\n   * @param {number} [limit=10]\n   *\n   * @example\n   *\n   * const { totalCount, list } = await managementClient.org.list()\n   *\n   * @returns\n   * @memberof OrgManagementClient\n   */\n\n\n  OrgManagementClient.prototype.list = function (page, limit) {\n    if (page === void 0) {\n      page = 1;\n    }\n\n    if (limit === void 0) {\n      limit = 10;\n    }\n\n    return __awaiter(this, void 0, void 0, function () {\n      var _a, list, totalCount;\n\n      var _this = this;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , orgs(this.graphqlClient, this.tokenProvider, {\n              page: page,\n              limit: limit\n            })];\n\n          case 1:\n            _a = _b.sent().orgs, list = _a.list, totalCount = _a.totalCount;\n            return [2\n            /*return*/\n            , {\n              totalCount: totalCount,\n              list: list.map(function (org) {\n                return _this.buildTree(org);\n              })\n            }];\n        }\n      });\n    });\n  };\n\n  OrgManagementClient.prototype.getAllOrgs = function (page, limit) {\n    if (page === void 0) {\n      page = 1;\n    }\n\n    if (limit === void 0) {\n      limit = 10;\n    }\n\n    return __awaiter(this, void 0, void 0, function () {\n      var count, data;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.httpClient.request({\n              method: 'GET',\n              url: this.options.host + \"/api/v2/orgs/count\"\n            })];\n\n          case 1:\n            count = _a.sent().count;\n            return [4\n            /*yield*/\n            , this.httpClient.request({\n              method: 'GET',\n              url: this.options.host + \"/api/v2/orgs\",\n              params: {\n                page: page,\n                limit: limit\n              }\n            })];\n\n          case 2:\n            data = _a.sent();\n            return [2\n            /*return*/\n            , {\n              totalCount: count,\n              list: data\n            }];\n        }\n      });\n    });\n  };\n  /**\n   * @name addNode\n   * @name_zh 添加节点\n   * @description 在组织机构中添加一个节点\n   *\n   * @param {string} orgId 组织机构 ID\n   * @param {string} parentNodeId 父节点 ID\n   * @param {Object} data 节点数据\n   * @param {string} data.name 节点名称\n   * @param {string} [data.code] 节点唯一标志\n   * @param {string} [data.description] 节点描述信息\n   *\n   * @example\n   *\n   * const org = await managementClient.org.create('北京非凡科技', '北京非凡科技有限公司', 'feifan');\n   * const { id: orgId, rootNode } = org\n   * const newOrg = await managementClient.org.addNode(orgId, rootNode.id, { name: '运营部门' })\n   *\n   * // newOrg.nodes.length 现在为 2\n   *\n   * @returns {Promise<Node>}\n   * @memberof OrgManagementClient\n   */\n\n\n  OrgManagementClient.prototype.addNode = function (orgId, parentNodeId, data) {\n    return __awaiter(this, void 0, void 0, function () {\n      var name, code, order, nameI18n, description, descriptionI18n, node;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            name = data.name, code = data.code, order = data.order, nameI18n = data.nameI18n, description = data.description, descriptionI18n = data.descriptionI18n;\n            return [4\n            /*yield*/\n            , addNode(this.graphqlClient, this.tokenProvider, {\n              orgId: orgId,\n              parentNodeId: parentNodeId,\n              name: name,\n              code: code,\n              order: order,\n              nameI18n: nameI18n,\n              description: description,\n              descriptionI18n: descriptionI18n\n            })];\n\n          case 1:\n            node = _a.sent().addNodeV2;\n            return [2\n            /*return*/\n            , node];\n        }\n      });\n    });\n  };\n  /**\n   * @name getNodeById\n   * @name_zh 获取某个节点详情\n   * @description 获取某个节点详情\n   *\n   * @param {string} nodeId 节点 ID\n   *\n   * @example\n   *\n   * const node = await managementClient.org.getNodeById('NODE_ID');\n   *\n   * // newOrg.nodes.length 现在为 2\n   *\n   * @returns {Promise<Node>}\n   * @memberof OrgManagementClient\n   */\n\n\n  OrgManagementClient.prototype.getNodeById = function (nodeId) {\n    return __awaiter(this, void 0, void 0, function () {\n      var node;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , nodeById(this.graphqlClient, this.tokenProvider, {\n              id: nodeId\n            })];\n\n          case 1:\n            node = _a.sent().nodeById;\n            return [2\n            /*return*/\n            , node];\n        }\n      });\n    });\n  };\n  /**\n   * @name updateNode\n   * @name_zh 修改节点\n   * @description 修改节点数据\n   *\n   * @param {string} id 节点 ID\n   * @param {Object} updates 修改数据\n   * @param {string} [updates.name] 节点名称\n   * @param {string} [updates.code] 节点唯一标志\n   * @param {string} [updates.description] 节点描述信息\n   *\n   * @example\n   *\n   * await managementClient.org.updateNode(\"NDOEID\", {\n   *    name: '新的节点名称'\n   * })\n   *\n   * @returns {Promise<Org>}\n   * @memberof OrgManagementClient\n   */\n\n\n  OrgManagementClient.prototype.updateNode = function (id, updates) {\n    return __awaiter(this, void 0, void 0, function () {\n      var name, code, description, node;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            name = updates.name, code = updates.code, description = updates.description;\n            return [4\n            /*yield*/\n            , updateNode(this.graphqlClient, this.tokenProvider, {\n              id: id,\n              name: name,\n              code: code,\n              description: description\n            })];\n\n          case 1:\n            node = _a.sent().updateNode;\n            return [2\n            /*return*/\n            , node];\n        }\n      });\n    });\n  };\n  /**\n   * @name findById\n   * @name_zh 获取组织机构详情\n   * @description 通过组织机构 ID 获取组织机构详情\n   *\n   * @param {string} id 组织机构 ID\n   *\n   * @returns {Promise<Org>}\n   * @memberof OrgManagementClient\n   */\n\n\n  OrgManagementClient.prototype.findById = function (id) {\n    return __awaiter(this, void 0, void 0, function () {\n      var data;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , org(this.graphqlClient, this.tokenProvider, {\n              id: id\n            })];\n\n          case 1:\n            data = _a.sent().org;\n            return [2\n            /*return*/\n            , this.buildTree(data)];\n        }\n      });\n    });\n  };\n  /**\n   * @name deleteNode\n   * @name_zh 删除节点\n   * @description 删除组织机构树中的某一个节点\n   *\n   * @param {string} orgId 组织机构 ID\n   * @param {string} nodeId 节点 ID\n   *\n   * @returns {Promise<CommonMessage>}\n   * @memberof OrgManagementClient\n   */\n\n\n  OrgManagementClient.prototype.deleteNode = function (orgId, nodeId) {\n    return __awaiter(this, void 0, void 0, function () {\n      var data;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , deleteNode(this.graphqlClient, this.tokenProvider, {\n              orgId: orgId,\n              nodeId: nodeId\n            })];\n\n          case 1:\n            data = _a.sent().deleteNode;\n            return [2\n            /*return*/\n            , data];\n        }\n      });\n    });\n  };\n  /**\n   * @name moveNode 移动节点\n   * @name_zh 移动节点\n   * @description 移动组织机构节点，移动某节点时需要指定该节点新的父节点。注意不能将一个节点移动到自己的子节点下面。\n   *\n   * @param {string} orgId 组织机构 ID\n   * @param {string} nodeId 需要移动的节点 ID\n   * @param {string} targetParentId 目标父节点 ID\n   *\n   * @example\n   *\n   * await managementClient.org.moveNode(\"ORGID\", \"NODEID\", \"TRAGET_NODE_ID\")\n   *\n   * @returns {Promise<Org>} 最新的树结构\n   * @memberof OrgManagementClient\n   *\n   */\n\n\n  OrgManagementClient.prototype.moveNode = function (orgId, nodeId, targetParentId) {\n    return __awaiter(this, void 0, void 0, function () {\n      var org;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , moveNode(this.graphqlClient, this.tokenProvider, {\n              orgId: orgId,\n              nodeId: nodeId,\n              targetParentId: targetParentId\n            })];\n\n          case 1:\n            org = _a.sent().moveNode;\n            return [2\n            /*return*/\n            , this.buildTree(org)];\n        }\n      });\n    });\n  };\n  /**\n   * @name isRootNode\n   * @name_zh 判断是否为根节点\n   * @description 判断一个节点是不是组织树的根节点\n   *\n   * @param {string} orgId 组织机构 ID\n   * @param {string} nodeId 组织机构 ID\n   *\n   *\n   * @returns {Promise<boolean>}\n   * @memberof OrgManagementClient\n   */\n\n\n  OrgManagementClient.prototype.isRootNode = function (orgId, nodeId) {\n    return __awaiter(this, void 0, void 0, function () {\n      var res;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , isRootNode(this.graphqlClient, this.tokenProvider, {\n              orgId: orgId,\n              nodeId: nodeId\n            })];\n\n          case 1:\n            res = _a.sent();\n            return [2\n            /*return*/\n            , res.isRootNode];\n        }\n      });\n    });\n  };\n  /**\n   * @name listChildren\n   * @name_zh 获取子节点列表\n   * @description 查询一个节点的子节点列表\n   *\n   * @param {string} orgId 组织机构 ID\n   * @param {string} nodeId 组织机构 ID\n   *\n   * @example\n   *\n   * // 子节点列表\n   * cosnt children = await managementClient.org.moveNode(\"ORGID\", \"NODEID\")\n   *\n   *\n   * @returns {Promise<Node[]>}\n   * @memberof OrgManagementClient\n   */\n\n\n  OrgManagementClient.prototype.listChildren = function (nodeId) {\n    return __awaiter(this, void 0, void 0, function () {\n      var res;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , getChildrenNodes(this.graphqlClient, this.tokenProvider, {\n              nodeId: nodeId\n            })];\n\n          case 1:\n            res = _a.sent();\n            return [2\n            /*return*/\n            , res.childrenNodes];\n        }\n      });\n    });\n  };\n  /**\n   * @name rootNode\n   * @name_zh 获取根节点\n   * @description 获取一个组织的根节点\n   *\n   * @param {string} orgId 组织机构 ID\n   *\n   * @example\n   *\n   * const rootNode = await managementClient.org.rootNode(\"ORGID\")\n   *\n   * @returns {Promise<Node[]>}\n   * @memberof OrgManagementClient\n   */\n\n\n  OrgManagementClient.prototype.rootNode = function (orgId) {\n    return __awaiter(this, void 0, void 0, function () {\n      var res;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , rootNode(this.graphqlClient, this.tokenProvider, {\n              orgId: orgId\n            })];\n\n          case 1:\n            res = _a.sent();\n            return [2\n            /*return*/\n            , res.rootNode];\n        }\n      });\n    });\n  };\n  /**\n   * @name importByJson\n   * @name_zh 通过 JSON 导入\n   * @description 通过一个 JSON 树结构导入组织机构\n   *\n   * @param {Object} json JSON 格式的树结构，详细格式请见示例代码。\n   *\n   * @example\n   *\n   * const tree = {\n   *   name: '北京非凡科技有限公司',\n   *   code: 'feifan',\n   *   children: [\n   *      {\n   *          code: 'operation',\n   *          name: '运营',\n   *          description: '商业化部门'\n   *       },\n   *       {\n   *         code: 'dev',\n   *         name: '研发',\n   *         description: '研发部门',\n   *         children: [\n   *           {\n   *             code: 'backend',\n   *             name: '后端',\n   *             description: '后端研发部门'\n   *           }\n   *         ]\n   *       }\n   *     ]\n   *   };\n   * const org = await managementClient.org.importByJson(tree);\n   *\n   * @returns {Promise<Node[]>}\n   * @memberof OrgManagementClient\n   */\n\n\n  OrgManagementClient.prototype.importByJson = function (json) {\n    return __awaiter(this, void 0, void 0, function () {\n      var data;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.httpClient.request({\n              method: 'POST',\n              url: this.options.host + \"/api/v2/orgs/import\",\n              data: {\n                filetype: 'json',\n                file: json\n              }\n            })];\n\n          case 1:\n            data = _a.sent();\n            return [2\n            /*return*/\n            , data];\n        }\n      });\n    });\n  };\n  /**\n   * @name addMembers\n   * @name_zh 添加成功\n   * @description 节点添加成员\n   *\n   * @param {string} nodeId 节点 ID\n   * @param {string[]} userIds 用户 ID 列表\n   *\n   * @returns {Promise<PaginatedUsers>}\n   * @memberof OrgManagementClient\n   *\n   */\n\n\n  OrgManagementClient.prototype.addMembers = function (nodeId, userIds) {\n    return __awaiter(this, void 0, void 0, function () {\n      var data;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , addMember(this.graphqlClient, this.tokenProvider, {\n              nodeId: nodeId,\n              userIds: userIds\n            })];\n\n          case 1:\n            data = _a.sent().addMember;\n            return [2\n            /*return*/\n            , data.users];\n        }\n      });\n    });\n  };\n\n  OrgManagementClient.prototype.moveMembers = function (options) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , moveMembers(this.graphqlClient, this.tokenProvider, options)];\n\n          case 1:\n            _a.sent();\n\n            return [2\n            /*return*/\n            , true];\n        }\n      });\n    });\n  };\n  /**\n   * @name listMembers\n   * @name_zh 获取节点成员\n   * @description 获取节点成员，可以获取直接添加到该节点中的用户，也可以获取到该节点子节点的用户。\n   *\n   * @param {string} nodeId 节点 ID\n   * @param {Object} options 查询参数\n   * @param {number} [options.page=1]\n   * @param {number} [options.limit=10]\n   * @param {boolean} [options.includeChildrenNodes=false] 是否获取所有子节点的成员\n   *\n   *\n   * @returns {Promise<PaginatedUsers>}\n   * @memberof OrgManagementClient\n   *\n   */\n\n\n  OrgManagementClient.prototype.listMembers = function (nodeId, options) {\n    return __awaiter(this, void 0, void 0, function () {\n      var nodeById;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , getMembersById(this.graphqlClient, this.tokenProvider, __assign({\n              id: nodeId\n            }, options))];\n\n          case 1:\n            nodeById = _a.sent().nodeById;\n            return [2\n            /*return*/\n            , nodeById.users];\n        }\n      });\n    });\n  };\n  /**\n   * @name removeMembers\n   * @name_zh 删除成功\n   * @description 删除节点成员\n   *\n   * @param {string} nodeId 节点 ID\n   * @param {string[]} userIds 用户 ID 列表\n   *\n   * @returns {Promise<PaginatedUsers>}\n   * @memberof OrgManagementClient\n   *\n   */\n\n\n  OrgManagementClient.prototype.removeMembers = function (nodeId, userIds) {\n    return __awaiter(this, void 0, void 0, function () {\n      var data;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , removeMembers(this.graphqlClient, this.tokenProvider, {\n              nodeId: nodeId,\n              userIds: userIds\n            })];\n\n          case 1:\n            data = _a.sent().removeMember;\n            return [2\n            /*return*/\n            , data.users];\n        }\n      });\n    });\n  };\n  /**\n   * @name setMainDepartment\n   * @name_zh 设置用户主部门\n   * @description 设置用户主部门\n   *\n   * @param {string} userId 用户 ID\n   * @param {string} departmentId 部门 ID\n   *\n   * @returns {Promise<PaginatedUsers>}\n   * @memberof OrgManagementClient\n   *\n   */\n\n\n  OrgManagementClient.prototype.setMainDepartment = function (userId, departmentId) {\n    return __awaiter(this, void 0, void 0, function () {\n      var data;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , setMainDepartment(this.graphqlClient, this.tokenProvider, {\n              userId: userId,\n              departmentId: departmentId\n            })];\n\n          case 1:\n            data = _a.sent().setMainDepartment;\n            return [2\n            /*return*/\n            , data];\n        }\n      });\n    });\n  };\n  /**\n   * @description 导出所有组织机构\n   */\n\n\n  OrgManagementClient.prototype.exportAll = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var data;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.httpClient.request({\n              method: 'GET',\n              url: this.options.host + \"/api/v2/orgs/export\"\n            })];\n\n          case 1:\n            data = _a.sent();\n            return [2\n            /*return*/\n            , data];\n        }\n      });\n    });\n  };\n  /**\n   * @description 导出某个组织机构\n   */\n\n\n  OrgManagementClient.prototype.exportByOrgId = function (orgId) {\n    return __awaiter(this, void 0, void 0, function () {\n      var data;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.httpClient.request({\n              method: 'GET',\n              url: this.options.host + \"/api/v2/orgs/export?org_id=\" + orgId\n            })];\n\n          case 1:\n            data = _a.sent();\n            return [2\n            /*return*/\n            , data];\n        }\n      });\n    });\n  };\n  /**\n   * @description 获取组织机构节点被授权的所有资源\n   *\n   * @param nodeId: 分组 ID\n   * @param namespace: 权限组 namespace code\n   * @param options.resourceType 资源类型\n   */\n\n\n  OrgManagementClient.prototype.listAuthorizedResourcesByNodeId = function (nodeId, namespace, options) {\n    return __awaiter(this, void 0, void 0, function () {\n      var resourceType, node, _a, list, totalCount;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            resourceType = (options || {}).resourceType;\n            return [4\n            /*yield*/\n            , listNodeByIdAuthorizedResources(this.graphqlClient, this.tokenProvider, {\n              id: nodeId,\n              namespace: namespace,\n              resourceType: resourceType\n            })];\n\n          case 1:\n            node = _b.sent().nodeById;\n\n            if (!node) {\n              throw new Error('组织机构节点不存在');\n            }\n\n            _a = node.authorizedResources, list = _a.list, totalCount = _a.totalCount;\n            list = formatAuthorizedResources(list);\n            return [2\n            /*return*/\n            , {\n              list: list,\n              totalCount: totalCount\n            }];\n        }\n      });\n    });\n  };\n  /**\n   * @description 获取组织机构节点被授权的所有资源\n   *\n   * @param orgId: 组织机构 ID；\n   * @param code: 节点 code\n   * @param namespace: 权限组 namespace code\n   * @param options.resourceType 资源类型\n   */\n\n\n  OrgManagementClient.prototype.listAuthorizedResourcesByNodeCode = function (orgId, code, namespace, options) {\n    return __awaiter(this, void 0, void 0, function () {\n      var resourceType, node, _a, list, totalCount;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            resourceType = (options || {}).resourceType;\n            return [4\n            /*yield*/\n            , listNodeByCodeAuthorizedResources(this.graphqlClient, this.tokenProvider, {\n              orgId: orgId,\n              code: code,\n              namespace: namespace,\n              resourceType: resourceType\n            })];\n\n          case 1:\n            node = _b.sent().nodeByCode;\n\n            if (!node) {\n              throw new Error('组织机构节点不存在');\n            }\n\n            _a = node.authorizedResources, list = _a.list, totalCount = _a.totalCount;\n            list = formatAuthorizedResources(list);\n            return [2\n            /*return*/\n            , {\n              list: list,\n              totalCount: totalCount\n            }];\n        }\n      });\n    });\n  };\n\n  OrgManagementClient.prototype.startSync = function (options) {\n    return __awaiter(this, void 0, void 0, function () {\n      var providerType, adConnectorId, url, body;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            providerType = options.providerType, adConnectorId = options.adConnectorId;\n            url = '';\n            body = {};\n\n            if (providerType === 'wechatwork') {\n              url = this.options.host + \"/connections/enterprise/wechatwork/start-sync\";\n            } else if (providerType === 'dingtalk') {\n              url = this.options.host + \"/connections/enterprise/dingtalk/start-sync\";\n            } else if (providerType === 'ad') {\n              if (!adConnectorId) {\n                throw new Error('must provider adConnectorId');\n              }\n\n              url = this.options.host + \"/api/v2/ad/sync\";\n              body = {\n                connectionId: adConnectorId\n              };\n            }\n\n            return [4\n            /*yield*/\n            , this.httpClient.request({\n              method: 'POST',\n              url: url,\n              data: body\n            })];\n\n          case 1:\n            _a.sent();\n\n            return [2\n            /*return*/\n            , true];\n        }\n      });\n    });\n  };\n  /**\n   * @description 搜索组织机构节点\n   *\n   * @param keyword 查询关键词\n   * @returns\n   */\n\n\n  OrgManagementClient.prototype.searchNodes = function (keyword) {\n    return __awaiter(this, void 0, void 0, function () {\n      var data;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , searchNodes(this.graphqlClient, this.tokenProvider, {\n              keyword: keyword\n            })];\n\n          case 1:\n            data = _a.sent().searchNodes;\n            return [2\n            /*return*/\n            , data];\n        }\n      });\n    });\n  };\n  /**\n   * @description 通过租户 ID 获取对应的组织机构\n   * @param tenantId 租户 ID\n   */\n\n\n  OrgManagementClient.prototype.getOrgByTenantId = function (tenantId) {\n    return __awaiter(this, void 0, void 0, function () {\n      var url, data;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            url = this.options.host + \"/api/v2/orgs/by-tenant?tenant_id=\" + tenantId;\n            return [4\n            /*yield*/\n            , this.httpClient.request({\n              method: 'GET',\n              url: url\n            })];\n\n          case 1:\n            data = _a.sent();\n            return [2\n            /*return*/\n            , data];\n        }\n      });\n    });\n  };\n\n  return OrgManagementClient;\n}();\n\nexport { OrgManagementClient };","map":{"version":3,"sources":["../../../../src/lib/management/OrgManagementClient.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nimport buildTree, { formatAuthorizedResources } from '../utils';\nimport { createOrg, org, deleteOrg, deleteNode, getChildrenNodes, addMember, getMembersById, addNode, updateNode, moveNode, removeMembers, isRootNode, rootNode, nodeById, setMainDepartment, listNodeByIdAuthorizedResources, listNodeByCodeAuthorizedResources, moveMembers, searchNodes, orgs } from '../graphqlapi';\n/**\n * @class OrgManagementClient 管理组织机构\n * @description 一个 Authing 用户池可以创建多个组织机构。此模块用于管理 Authing 组织机构，可以进行组织机构的增删改查、添加删除移动节点、导入组织机构等操作。\n *\n * @example\n *\n * 请使用以下方式使用该模块：\n * \\`\\`\\`javascript\n * import { ManagementClient } from \"authing-js-sdk\"\n * const managementClient = new ManagementClient({\n *    userPoolId: \"YOUR_USERPOOL_ID\",\n *    secret: \"YOUR_USERPOOL_SECRET\",\n * })\n * managementClient.org.list // 获取用户池组织机构列表\n * managementClient.org.moveNode // 获取组织机构详情\n * managementClient.org.listMembers // 获取节点用户列表\n * \\`\\`\\`\n *\n * @name OrgManagementClient\n */\nvar OrgManagementClient = /** @class */ (function () {\n    function OrgManagementClient(options, graphqlClient, httpClient, tokenProvider) {\n        this.options = options;\n        this.httpClient = httpClient;\n        this.graphqlClient = graphqlClient;\n        this.tokenProvider = tokenProvider;\n    }\n    OrgManagementClient.prototype.buildTree = function (org) {\n        org.tree = buildTree(JSON.parse(JSON.stringify(org.nodes)));\n        return org;\n    };\n    /**\n     * @name create\n     * @name_zh 创建组织机构\n     * @description 创建组织机构，会创建一个只有一个节点的组织机构。\n     * 如果你想将一个完整的组织树导入进来，请使用 importByJson 方法。\n     *\n     * @param {string} name 组织机构名称，该名称会作为该组织机构根节点的名称。\n     * @param {string} [description] 根节点描述\n     * @param {string} [code] 根节点唯一标志，必须为合法的英文字符。\n     *\n     * @example\n     *\n     * const org = await managementClient.org.create('北京非凡科技', '北京非凡科技有限公司', 'feifan');\n     *\n     * @memberof OrgManagementClient\n     */\n    OrgManagementClient.prototype.create = function (name, description, code, tenantId) {\n        return __awaiter(this, void 0, void 0, function () {\n            var org;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, createOrg(this.graphqlClient, this.tokenProvider, {\n                            name: name,\n                            description: description,\n                            code: code,\n                            tenantId: tenantId\n                        })];\n                    case 1:\n                        org = (_a.sent()).createOrg;\n                        return [2 /*return*/, org];\n                }\n            });\n        });\n    };\n    /**\n     * @name deleteById\n     * @name_zh 删除组织机构\n     * @description 删除组织机构树\n     * @param {string} id 组织机构 ID\n     *\n     * @returns {Promise<CommonMessage>}\n     * @memberof OrgManagementClient\n     */\n    OrgManagementClient.prototype.deleteById = function (id) {\n        return __awaiter(this, void 0, void 0, function () {\n            var res;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, deleteOrg(this.graphqlClient, this.tokenProvider, {\n                            id: id\n                        })];\n                    case 1:\n                        res = _a.sent();\n                        return [2 /*return*/, res.deleteOrg];\n                }\n            });\n        });\n    };\n    /**\n     * @deprecated\n     * @name list\n     * @name_zh 获取用户池组织机构列表\n     * @description 获取用户池组织机构列表\n     *\n     * @param {number} [page=1]\n     * @param {number} [limit=10]\n     *\n     * @example\n     *\n     * const { totalCount, list } = await managementClient.org.list()\n     *\n     * @returns\n     * @memberof OrgManagementClient\n     */\n    OrgManagementClient.prototype.list = function (page, limit) {\n        if (page === void 0) { page = 1; }\n        if (limit === void 0) { limit = 10; }\n        return __awaiter(this, void 0, void 0, function () {\n            var _a, list, totalCount;\n            var _this = this;\n            return __generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0: return [4 /*yield*/, orgs(this.graphqlClient, this.tokenProvider, {\n                            page: page,\n                            limit: limit\n                        })];\n                    case 1:\n                        _a = (_b.sent()).orgs, list = _a.list, totalCount = _a.totalCount;\n                        return [2 /*return*/, {\n                                totalCount: totalCount,\n                                list: list.map(function (org) { return _this.buildTree(org); })\n                            }];\n                }\n            });\n        });\n    };\n    OrgManagementClient.prototype.getAllOrgs = function (page, limit) {\n        if (page === void 0) { page = 1; }\n        if (limit === void 0) { limit = 10; }\n        return __awaiter(this, void 0, void 0, function () {\n            var count, data;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this.httpClient.request({\n                            method: 'GET',\n                            url: this.options.host + \"/api/v2/orgs/count\"\n                        })];\n                    case 1:\n                        count = (_a.sent()).count;\n                        return [4 /*yield*/, this.httpClient.request({\n                                method: 'GET',\n                                url: this.options.host + \"/api/v2/orgs\",\n                                params: {\n                                    page: page,\n                                    limit: limit\n                                }\n                            })];\n                    case 2:\n                        data = _a.sent();\n                        return [2 /*return*/, {\n                                totalCount: count,\n                                list: data\n                            }];\n                }\n            });\n        });\n    };\n    /**\n     * @name addNode\n     * @name_zh 添加节点\n     * @description 在组织机构中添加一个节点\n     *\n     * @param {string} orgId 组织机构 ID\n     * @param {string} parentNodeId 父节点 ID\n     * @param {Object} data 节点数据\n     * @param {string} data.name 节点名称\n     * @param {string} [data.code] 节点唯一标志\n     * @param {string} [data.description] 节点描述信息\n     *\n     * @example\n     *\n     * const org = await managementClient.org.create('北京非凡科技', '北京非凡科技有限公司', 'feifan');\n     * const { id: orgId, rootNode } = org\n     * const newOrg = await managementClient.org.addNode(orgId, rootNode.id, { name: '运营部门' })\n     *\n     * // newOrg.nodes.length 现在为 2\n     *\n     * @returns {Promise<Node>}\n     * @memberof OrgManagementClient\n     */\n    OrgManagementClient.prototype.addNode = function (orgId, parentNodeId, data) {\n        return __awaiter(this, void 0, void 0, function () {\n            var name, code, order, nameI18n, description, descriptionI18n, node;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        name = data.name, code = data.code, order = data.order, nameI18n = data.nameI18n, description = data.description, descriptionI18n = data.descriptionI18n;\n                        return [4 /*yield*/, addNode(this.graphqlClient, this.tokenProvider, {\n                                orgId: orgId,\n                                parentNodeId: parentNodeId,\n                                name: name,\n                                code: code,\n                                order: order,\n                                nameI18n: nameI18n,\n                                description: description,\n                                descriptionI18n: descriptionI18n\n                            })];\n                    case 1:\n                        node = (_a.sent()).addNodeV2;\n                        return [2 /*return*/, node];\n                }\n            });\n        });\n    };\n    /**\n     * @name getNodeById\n     * @name_zh 获取某个节点详情\n     * @description 获取某个节点详情\n     *\n     * @param {string} nodeId 节点 ID\n     *\n     * @example\n     *\n     * const node = await managementClient.org.getNodeById('NODE_ID');\n     *\n     * // newOrg.nodes.length 现在为 2\n     *\n     * @returns {Promise<Node>}\n     * @memberof OrgManagementClient\n     */\n    OrgManagementClient.prototype.getNodeById = function (nodeId) {\n        return __awaiter(this, void 0, void 0, function () {\n            var node;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, nodeById(this.graphqlClient, this.tokenProvider, {\n                            id: nodeId\n                        })];\n                    case 1:\n                        node = (_a.sent()).nodeById;\n                        return [2 /*return*/, node];\n                }\n            });\n        });\n    };\n    /**\n     * @name updateNode\n     * @name_zh 修改节点\n     * @description 修改节点数据\n     *\n     * @param {string} id 节点 ID\n     * @param {Object} updates 修改数据\n     * @param {string} [updates.name] 节点名称\n     * @param {string} [updates.code] 节点唯一标志\n     * @param {string} [updates.description] 节点描述信息\n     *\n     * @example\n     *\n     * await managementClient.org.updateNode(\"NDOEID\", {\n     *    name: '新的节点名称'\n     * })\n     *\n     * @returns {Promise<Org>}\n     * @memberof OrgManagementClient\n     */\n    OrgManagementClient.prototype.updateNode = function (id, updates) {\n        return __awaiter(this, void 0, void 0, function () {\n            var name, code, description, node;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        name = updates.name, code = updates.code, description = updates.description;\n                        return [4 /*yield*/, updateNode(this.graphqlClient, this.tokenProvider, {\n                                id: id,\n                                name: name,\n                                code: code,\n                                description: description\n                            })];\n                    case 1:\n                        node = (_a.sent()).updateNode;\n                        return [2 /*return*/, node];\n                }\n            });\n        });\n    };\n    /**\n     * @name findById\n     * @name_zh 获取组织机构详情\n     * @description 通过组织机构 ID 获取组织机构详情\n     *\n     * @param {string} id 组织机构 ID\n     *\n     * @returns {Promise<Org>}\n     * @memberof OrgManagementClient\n     */\n    OrgManagementClient.prototype.findById = function (id) {\n        return __awaiter(this, void 0, void 0, function () {\n            var data;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, org(this.graphqlClient, this.tokenProvider, {\n                            id: id\n                        })];\n                    case 1:\n                        data = (_a.sent()).org;\n                        return [2 /*return*/, this.buildTree(data)];\n                }\n            });\n        });\n    };\n    /**\n     * @name deleteNode\n     * @name_zh 删除节点\n     * @description 删除组织机构树中的某一个节点\n     *\n     * @param {string} orgId 组织机构 ID\n     * @param {string} nodeId 节点 ID\n     *\n     * @returns {Promise<CommonMessage>}\n     * @memberof OrgManagementClient\n     */\n    OrgManagementClient.prototype.deleteNode = function (orgId, nodeId) {\n        return __awaiter(this, void 0, void 0, function () {\n            var data;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, deleteNode(this.graphqlClient, this.tokenProvider, {\n                            orgId: orgId,\n                            nodeId: nodeId\n                        })];\n                    case 1:\n                        data = (_a.sent()).deleteNode;\n                        return [2 /*return*/, data];\n                }\n            });\n        });\n    };\n    /**\n     * @name moveNode 移动节点\n     * @name_zh 移动节点\n     * @description 移动组织机构节点，移动某节点时需要指定该节点新的父节点。注意不能将一个节点移动到自己的子节点下面。\n     *\n     * @param {string} orgId 组织机构 ID\n     * @param {string} nodeId 需要移动的节点 ID\n     * @param {string} targetParentId 目标父节点 ID\n     *\n     * @example\n     *\n     * await managementClient.org.moveNode(\"ORGID\", \"NODEID\", \"TRAGET_NODE_ID\")\n     *\n     * @returns {Promise<Org>} 最新的树结构\n     * @memberof OrgManagementClient\n     *\n     */\n    OrgManagementClient.prototype.moveNode = function (orgId, nodeId, targetParentId) {\n        return __awaiter(this, void 0, void 0, function () {\n            var org;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, moveNode(this.graphqlClient, this.tokenProvider, {\n                            orgId: orgId,\n                            nodeId: nodeId,\n                            targetParentId: targetParentId\n                        })];\n                    case 1:\n                        org = (_a.sent()).moveNode;\n                        return [2 /*return*/, this.buildTree(org)];\n                }\n            });\n        });\n    };\n    /**\n     * @name isRootNode\n     * @name_zh 判断是否为根节点\n     * @description 判断一个节点是不是组织树的根节点\n     *\n     * @param {string} orgId 组织机构 ID\n     * @param {string} nodeId 组织机构 ID\n     *\n     *\n     * @returns {Promise<boolean>}\n     * @memberof OrgManagementClient\n     */\n    OrgManagementClient.prototype.isRootNode = function (orgId, nodeId) {\n        return __awaiter(this, void 0, void 0, function () {\n            var res;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, isRootNode(this.graphqlClient, this.tokenProvider, {\n                            orgId: orgId,\n                            nodeId: nodeId\n                        })];\n                    case 1:\n                        res = _a.sent();\n                        return [2 /*return*/, res.isRootNode];\n                }\n            });\n        });\n    };\n    /**\n     * @name listChildren\n     * @name_zh 获取子节点列表\n     * @description 查询一个节点的子节点列表\n     *\n     * @param {string} orgId 组织机构 ID\n     * @param {string} nodeId 组织机构 ID\n     *\n     * @example\n     *\n     * // 子节点列表\n     * cosnt children = await managementClient.org.moveNode(\"ORGID\", \"NODEID\")\n     *\n     *\n     * @returns {Promise<Node[]>}\n     * @memberof OrgManagementClient\n     */\n    OrgManagementClient.prototype.listChildren = function (nodeId) {\n        return __awaiter(this, void 0, void 0, function () {\n            var res;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, getChildrenNodes(this.graphqlClient, this.tokenProvider, {\n                            nodeId: nodeId\n                        })];\n                    case 1:\n                        res = _a.sent();\n                        return [2 /*return*/, res.childrenNodes];\n                }\n            });\n        });\n    };\n    /**\n     * @name rootNode\n     * @name_zh 获取根节点\n     * @description 获取一个组织的根节点\n     *\n     * @param {string} orgId 组织机构 ID\n     *\n     * @example\n     *\n     * const rootNode = await managementClient.org.rootNode(\"ORGID\")\n     *\n     * @returns {Promise<Node[]>}\n     * @memberof OrgManagementClient\n     */\n    OrgManagementClient.prototype.rootNode = function (orgId) {\n        return __awaiter(this, void 0, void 0, function () {\n            var res;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, rootNode(this.graphqlClient, this.tokenProvider, {\n                            orgId: orgId\n                        })];\n                    case 1:\n                        res = _a.sent();\n                        return [2 /*return*/, res.rootNode];\n                }\n            });\n        });\n    };\n    /**\n     * @name importByJson\n     * @name_zh 通过 JSON 导入\n     * @description 通过一个 JSON 树结构导入组织机构\n     *\n     * @param {Object} json JSON 格式的树结构，详细格式请见示例代码。\n     *\n     * @example\n     *\n     * const tree = {\n     *   name: '北京非凡科技有限公司',\n     *   code: 'feifan',\n     *   children: [\n     *      {\n     *          code: 'operation',\n     *          name: '运营',\n     *          description: '商业化部门'\n     *       },\n     *       {\n     *         code: 'dev',\n     *         name: '研发',\n     *         description: '研发部门',\n     *         children: [\n     *           {\n     *             code: 'backend',\n     *             name: '后端',\n     *             description: '后端研发部门'\n     *           }\n     *         ]\n     *       }\n     *     ]\n     *   };\n     * const org = await managementClient.org.importByJson(tree);\n     *\n     * @returns {Promise<Node[]>}\n     * @memberof OrgManagementClient\n     */\n    OrgManagementClient.prototype.importByJson = function (json) {\n        return __awaiter(this, void 0, void 0, function () {\n            var data;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this.httpClient.request({\n                            method: 'POST',\n                            url: this.options.host + \"/api/v2/orgs/import\",\n                            data: {\n                                filetype: 'json',\n                                file: json\n                            }\n                        })];\n                    case 1:\n                        data = _a.sent();\n                        return [2 /*return*/, data];\n                }\n            });\n        });\n    };\n    /**\n     * @name addMembers\n     * @name_zh 添加成功\n     * @description 节点添加成员\n     *\n     * @param {string} nodeId 节点 ID\n     * @param {string[]} userIds 用户 ID 列表\n     *\n     * @returns {Promise<PaginatedUsers>}\n     * @memberof OrgManagementClient\n     *\n     */\n    OrgManagementClient.prototype.addMembers = function (nodeId, userIds) {\n        return __awaiter(this, void 0, void 0, function () {\n            var data;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, addMember(this.graphqlClient, this.tokenProvider, {\n                            nodeId: nodeId,\n                            userIds: userIds\n                        })];\n                    case 1:\n                        data = (_a.sent()).addMember;\n                        return [2 /*return*/, data.users];\n                }\n            });\n        });\n    };\n    OrgManagementClient.prototype.moveMembers = function (options) {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, moveMembers(this.graphqlClient, this.tokenProvider, options)];\n                    case 1:\n                        _a.sent();\n                        return [2 /*return*/, true];\n                }\n            });\n        });\n    };\n    /**\n     * @name listMembers\n     * @name_zh 获取节点成员\n     * @description 获取节点成员，可以获取直接添加到该节点中的用户，也可以获取到该节点子节点的用户。\n     *\n     * @param {string} nodeId 节点 ID\n     * @param {Object} options 查询参数\n     * @param {number} [options.page=1]\n     * @param {number} [options.limit=10]\n     * @param {boolean} [options.includeChildrenNodes=false] 是否获取所有子节点的成员\n     *\n     *\n     * @returns {Promise<PaginatedUsers>}\n     * @memberof OrgManagementClient\n     *\n     */\n    OrgManagementClient.prototype.listMembers = function (nodeId, options) {\n        return __awaiter(this, void 0, void 0, function () {\n            var nodeById;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, getMembersById(this.graphqlClient, this.tokenProvider, __assign({ id: nodeId }, options))];\n                    case 1:\n                        nodeById = (_a.sent()).nodeById;\n                        return [2 /*return*/, nodeById.users];\n                }\n            });\n        });\n    };\n    /**\n     * @name removeMembers\n     * @name_zh 删除成功\n     * @description 删除节点成员\n     *\n     * @param {string} nodeId 节点 ID\n     * @param {string[]} userIds 用户 ID 列表\n     *\n     * @returns {Promise<PaginatedUsers>}\n     * @memberof OrgManagementClient\n     *\n     */\n    OrgManagementClient.prototype.removeMembers = function (nodeId, userIds) {\n        return __awaiter(this, void 0, void 0, function () {\n            var data;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, removeMembers(this.graphqlClient, this.tokenProvider, {\n                            nodeId: nodeId,\n                            userIds: userIds\n                        })];\n                    case 1:\n                        data = (_a.sent()).removeMember;\n                        return [2 /*return*/, data.users];\n                }\n            });\n        });\n    };\n    /**\n     * @name setMainDepartment\n     * @name_zh 设置用户主部门\n     * @description 设置用户主部门\n     *\n     * @param {string} userId 用户 ID\n     * @param {string} departmentId 部门 ID\n     *\n     * @returns {Promise<PaginatedUsers>}\n     * @memberof OrgManagementClient\n     *\n     */\n    OrgManagementClient.prototype.setMainDepartment = function (userId, departmentId) {\n        return __awaiter(this, void 0, void 0, function () {\n            var data;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, setMainDepartment(this.graphqlClient, this.tokenProvider, {\n                            userId: userId,\n                            departmentId: departmentId\n                        })];\n                    case 1:\n                        data = (_a.sent()).setMainDepartment;\n                        return [2 /*return*/, data];\n                }\n            });\n        });\n    };\n    /**\n     * @description 导出所有组织机构\n     */\n    OrgManagementClient.prototype.exportAll = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var data;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this.httpClient.request({\n                            method: 'GET',\n                            url: this.options.host + \"/api/v2/orgs/export\"\n                        })];\n                    case 1:\n                        data = _a.sent();\n                        return [2 /*return*/, data];\n                }\n            });\n        });\n    };\n    /**\n     * @description 导出某个组织机构\n     */\n    OrgManagementClient.prototype.exportByOrgId = function (orgId) {\n        return __awaiter(this, void 0, void 0, function () {\n            var data;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this.httpClient.request({\n                            method: 'GET',\n                            url: this.options.host + \"/api/v2/orgs/export?org_id=\" + orgId\n                        })];\n                    case 1:\n                        data = _a.sent();\n                        return [2 /*return*/, data];\n                }\n            });\n        });\n    };\n    /**\n     * @description 获取组织机构节点被授权的所有资源\n     *\n     * @param nodeId: 分组 ID\n     * @param namespace: 权限组 namespace code\n     * @param options.resourceType 资源类型\n     */\n    OrgManagementClient.prototype.listAuthorizedResourcesByNodeId = function (nodeId, namespace, options) {\n        return __awaiter(this, void 0, void 0, function () {\n            var resourceType, node, _a, list, totalCount;\n            return __generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        resourceType = (options || {}).resourceType;\n                        return [4 /*yield*/, listNodeByIdAuthorizedResources(this.graphqlClient, this.tokenProvider, {\n                                id: nodeId,\n                                namespace: namespace,\n                                resourceType: resourceType\n                            })];\n                    case 1:\n                        node = (_b.sent()).nodeById;\n                        if (!node) {\n                            throw new Error('组织机构节点不存在');\n                        }\n                        _a = node.authorizedResources, list = _a.list, totalCount = _a.totalCount;\n                        list = formatAuthorizedResources(list);\n                        return [2 /*return*/, {\n                                list: list,\n                                totalCount: totalCount\n                            }];\n                }\n            });\n        });\n    };\n    /**\n     * @description 获取组织机构节点被授权的所有资源\n     *\n     * @param orgId: 组织机构 ID；\n     * @param code: 节点 code\n     * @param namespace: 权限组 namespace code\n     * @param options.resourceType 资源类型\n     */\n    OrgManagementClient.prototype.listAuthorizedResourcesByNodeCode = function (orgId, code, namespace, options) {\n        return __awaiter(this, void 0, void 0, function () {\n            var resourceType, node, _a, list, totalCount;\n            return __generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        resourceType = (options || {}).resourceType;\n                        return [4 /*yield*/, listNodeByCodeAuthorizedResources(this.graphqlClient, this.tokenProvider, {\n                                orgId: orgId,\n                                code: code,\n                                namespace: namespace,\n                                resourceType: resourceType\n                            })];\n                    case 1:\n                        node = (_b.sent()).nodeByCode;\n                        if (!node) {\n                            throw new Error('组织机构节点不存在');\n                        }\n                        _a = node.authorizedResources, list = _a.list, totalCount = _a.totalCount;\n                        list = formatAuthorizedResources(list);\n                        return [2 /*return*/, {\n                                list: list,\n                                totalCount: totalCount\n                            }];\n                }\n            });\n        });\n    };\n    OrgManagementClient.prototype.startSync = function (options) {\n        return __awaiter(this, void 0, void 0, function () {\n            var providerType, adConnectorId, url, body;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        providerType = options.providerType, adConnectorId = options.adConnectorId;\n                        url = '';\n                        body = {};\n                        if (providerType === 'wechatwork') {\n                            url = this.options.host + \"/connections/enterprise/wechatwork/start-sync\";\n                        }\n                        else if (providerType === 'dingtalk') {\n                            url = this.options.host + \"/connections/enterprise/dingtalk/start-sync\";\n                        }\n                        else if (providerType === 'ad') {\n                            if (!adConnectorId) {\n                                throw new Error('must provider adConnectorId');\n                            }\n                            url = this.options.host + \"/api/v2/ad/sync\";\n                            body = {\n                                connectionId: adConnectorId\n                            };\n                        }\n                        return [4 /*yield*/, this.httpClient.request({\n                                method: 'POST',\n                                url: url,\n                                data: body\n                            })];\n                    case 1:\n                        _a.sent();\n                        return [2 /*return*/, true];\n                }\n            });\n        });\n    };\n    /**\n     * @description 搜索组织机构节点\n     *\n     * @param keyword 查询关键词\n     * @returns\n     */\n    OrgManagementClient.prototype.searchNodes = function (keyword) {\n        return __awaiter(this, void 0, void 0, function () {\n            var data;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, searchNodes(this.graphqlClient, this.tokenProvider, {\n                            keyword: keyword\n                        })];\n                    case 1:\n                        data = (_a.sent()).searchNodes;\n                        return [2 /*return*/, data];\n                }\n            });\n        });\n    };\n    /**\n     * @description 通过租户 ID 获取对应的组织机构\n     * @param tenantId 租户 ID\n     */\n    OrgManagementClient.prototype.getOrgByTenantId = function (tenantId) {\n        return __awaiter(this, void 0, void 0, function () {\n            var url, data;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        url = this.options.host + \"/api/v2/orgs/by-tenant?tenant_id=\" + tenantId;\n                        return [4 /*yield*/, this.httpClient.request({\n                                method: 'GET',\n                                url: url\n                            })];\n                    case 1:\n                        data = _a.sent();\n                        return [2 /*return*/, data];\n                }\n            });\n        });\n    };\n    return OrgManagementClient;\n}());\nexport { OrgManagementClient };\n//# sourceMappingURL=OrgManagementClient.js.map"]},"metadata":{},"sourceType":"module"}